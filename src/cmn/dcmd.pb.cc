// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dcmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dcmd_api {

namespace {

const ::google::protobuf::Descriptor* KeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OprInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OprInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubTaskProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubTaskProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentReportReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentReportReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentMasterNoticeReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentMasterNoticeReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskCmdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskCmdReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentSubTaskProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentSubTaskProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskResultReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskResultReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentOprCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentOprCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentOprCmdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentOprCmdReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentTaskOutputReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentTaskOutputReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentRunningTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentRunningTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentRunningTaskReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentRunningTaskReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentRunningOpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentRunningOpr_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentRunningOprReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentRunningOprReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvalidMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvalidMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskOutputReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskOutputReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentRunningTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentRunningTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentRunningTaskReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentRunningTaskReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentRunningOpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentRunningOpr_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentRunningOprReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentRunningOprReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiExecOprCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiExecOprCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiExecOprCmdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiExecOprCmdReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiInvalidAgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiInvalidAgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiInvalidAgentInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiInvalidAgentInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskScriptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskScriptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskScriptInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskScriptInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiOprScriptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiOprScriptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiOprScriptInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiOprScriptInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentTaskProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentTaskProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentTaskProcessReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentTaskProcessReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskCmdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskCmdReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskWatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskWatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskWatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskWatchReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskCancelWatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskCancelWatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskCancelatchReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskCancelatchReply_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DcmdMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DcmdState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AgentState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SubTaskState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommandState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dcmd_2eproto() {
  protobuf_AddDesc_dcmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dcmd.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValue_descriptor_ = file->message_type(0);
  static const int KeyValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  };
  KeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValue_descriptor_,
      KeyValue::default_instance_,
      KeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValue));
  SubTaskInfo_descriptor_ = file->message_type(1);
  static const int SubTaskInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, svr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, task_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, cmd_id_),
  };
  SubTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubTaskInfo_descriptor_,
      SubTaskInfo::default_instance_,
      SubTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubTaskInfo));
  OprInfo_descriptor_ = file->message_type(2);
  static const int OprInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, running_second_),
  };
  OprInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OprInfo_descriptor_,
      OprInfo::default_instance_,
      OprInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OprInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OprInfo));
  SubTaskProcess_descriptor_ = file->message_type(3);
  static const int SubTaskProcess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskProcess, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskProcess, process_),
  };
  SubTaskProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubTaskProcess_descriptor_,
      SubTaskProcess::default_instance_,
      SubTaskProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubTaskProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubTaskProcess));
  TaskInfo_descriptor_ = file->message_type(4);
  static const int TaskInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, parent_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, success_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, failed_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, doing_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, undo_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, ignore_doing_subtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, ignore_failed_subtask_),
  };
  TaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfo));
  AgentInfo_descriptor_ = file->message_type(5);
  static const int AgentInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, connected_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, repored_ip_),
  };
  AgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentInfo_descriptor_,
      AgentInfo::default_instance_,
      AgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentInfo));
  AgentReport_descriptor_ = file->message_type(6);
  static const int AgentReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, agent_ips_),
  };
  AgentReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentReport_descriptor_,
      AgentReport::default_instance_,
      AgentReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentReport));
  AgentReportReply_descriptor_ = file->message_type(7);
  static const int AgentReportReply_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, heatbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, package_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, opr_queue_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, opr_overflow_threshold_),
  };
  AgentReportReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentReportReply_descriptor_,
      AgentReportReply::default_instance_,
      AgentReportReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentReportReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentReportReply));
  AgentMasterNoticeReply_descriptor_ = file->message_type(8);
  static const int AgentMasterNoticeReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMasterNoticeReply, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMasterNoticeReply, subtask_process_),
  };
  AgentMasterNoticeReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentMasterNoticeReply_descriptor_,
      AgentMasterNoticeReply::default_instance_,
      AgentMasterNoticeReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMasterNoticeReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentMasterNoticeReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentMasterNoticeReply));
  AgentTaskCmd_descriptor_ = file->message_type(9);
  static const int AgentTaskCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, task_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, ctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_repo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, svr_env_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, update_env_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, update_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, output_process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, task_arg_),
  };
  AgentTaskCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskCmd_descriptor_,
      AgentTaskCmd::default_instance_,
      AgentTaskCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskCmd));
  AgentTaskCmdReply_descriptor_ = file->message_type(10);
  static const int AgentTaskCmdReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmdReply, cmd_),
  };
  AgentTaskCmdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskCmdReply_descriptor_,
      AgentTaskCmdReply::default_instance_,
      AgentTaskCmdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskCmdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskCmdReply));
  AgentSubTaskProcess_descriptor_ = file->message_type(11);
  static const int AgentSubTaskProcess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, process_),
  };
  AgentSubTaskProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentSubTaskProcess_descriptor_,
      AgentSubTaskProcess::default_instance_,
      AgentSubTaskProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentSubTaskProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentSubTaskProcess));
  AgentTaskResult_descriptor_ = file->message_type(12);
  static const int AgentTaskResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, process_),
  };
  AgentTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskResult_descriptor_,
      AgentTaskResult::default_instance_,
      AgentTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskResult));
  AgentTaskResultReply_descriptor_ = file->message_type(13);
  static const int AgentTaskResultReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResultReply, cmd_),
  };
  AgentTaskResultReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskResultReply_descriptor_,
      AgentTaskResultReply::default_instance_,
      AgentTaskResultReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResultReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskResultReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskResultReply));
  AgentOprCmd_descriptor_ = file->message_type(14);
  static const int AgentOprCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, opr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, run_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, args_),
  };
  AgentOprCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentOprCmd_descriptor_,
      AgentOprCmd::default_instance_,
      AgentOprCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentOprCmd));
  AgentOprCmdReply_descriptor_ = file->message_type(15);
  static const int AgentOprCmdReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, ip_),
  };
  AgentOprCmdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentOprCmdReply_descriptor_,
      AgentOprCmdReply::default_instance_,
      AgentOprCmdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOprCmdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentOprCmdReply));
  AgentTaskOutput_descriptor_ = file->message_type(16);
  static const int AgentTaskOutput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, ip_),
  };
  AgentTaskOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskOutput_descriptor_,
      AgentTaskOutput::default_instance_,
      AgentTaskOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskOutput));
  AgentTaskOutputReply_descriptor_ = file->message_type(17);
  static const int AgentTaskOutputReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, err_),
  };
  AgentTaskOutputReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentTaskOutputReply_descriptor_,
      AgentTaskOutputReply::default_instance_,
      AgentTaskOutputReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentTaskOutputReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentTaskOutputReply));
  AgentRunningTask_descriptor_ = file->message_type(18);
  static const int AgentRunningTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, svr_name_),
  };
  AgentRunningTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentRunningTask_descriptor_,
      AgentRunningTask::default_instance_,
      AgentRunningTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentRunningTask));
  AgentRunningTaskReply_descriptor_ = file->message_type(19);
  static const int AgentRunningTaskReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, err_),
  };
  AgentRunningTaskReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentRunningTaskReply_descriptor_,
      AgentRunningTaskReply::default_instance_,
      AgentRunningTaskReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningTaskReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentRunningTaskReply));
  AgentRunningOpr_descriptor_ = file->message_type(20);
  static const int AgentRunningOpr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOpr, ip_),
  };
  AgentRunningOpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentRunningOpr_descriptor_,
      AgentRunningOpr::default_instance_,
      AgentRunningOpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentRunningOpr));
  AgentRunningOprReply_descriptor_ = file->message_type(21);
  static const int AgentRunningOprReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, err_),
  };
  AgentRunningOprReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentRunningOprReply_descriptor_,
      AgentRunningOprReply::default_instance_,
      AgentRunningOprReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentRunningOprReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentRunningOprReply));
  InvalidMsg_descriptor_ = file->message_type(22);
  static const int InvalidMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMsg, msg_type_),
  };
  InvalidMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvalidMsg_descriptor_,
      InvalidMsg::default_instance_,
      InvalidMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvalidMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvalidMsg));
  UiTaskOutput_descriptor_ = file->message_type(23);
  static const int UiTaskOutput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, passwd_),
  };
  UiTaskOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskOutput_descriptor_,
      UiTaskOutput::default_instance_,
      UiTaskOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskOutput));
  UiTaskOutputReply_descriptor_ = file->message_type(24);
  static const int UiTaskOutputReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, err_),
  };
  UiTaskOutputReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskOutputReply_descriptor_,
      UiTaskOutputReply::default_instance_,
      UiTaskOutputReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskOutputReply));
  UiAgentRunningTask_descriptor_ = file->message_type(25);
  static const int UiAgentRunningTask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, svr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, passwd_),
  };
  UiAgentRunningTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentRunningTask_descriptor_,
      UiAgentRunningTask::default_instance_,
      UiAgentRunningTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentRunningTask));
  UiAgentRunningTaskReply_descriptor_ = file->message_type(26);
  static const int UiAgentRunningTaskReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, err_),
  };
  UiAgentRunningTaskReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentRunningTaskReply_descriptor_,
      UiAgentRunningTaskReply::default_instance_,
      UiAgentRunningTaskReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentRunningTaskReply));
  UiAgentRunningOpr_descriptor_ = file->message_type(27);
  static const int UiAgentRunningOpr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, passwd_),
  };
  UiAgentRunningOpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentRunningOpr_descriptor_,
      UiAgentRunningOpr::default_instance_,
      UiAgentRunningOpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentRunningOpr));
  UiAgentRunningOprReply_descriptor_ = file->message_type(28);
  static const int UiAgentRunningOprReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, err_),
  };
  UiAgentRunningOprReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentRunningOprReply_descriptor_,
      UiAgentRunningOprReply::default_instance_,
      UiAgentRunningOprReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentRunningOprReply));
  UiExecOprCmd_descriptor_ = file->message_type(29);
  static const int UiExecOprCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, opr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, passwd_),
  };
  UiExecOprCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiExecOprCmd_descriptor_,
      UiExecOprCmd::default_instance_,
      UiExecOprCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiExecOprCmd));
  UiExecOprCmdReply_descriptor_ = file->message_type(30);
  static const int UiExecOprCmdReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, err_),
  };
  UiExecOprCmdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiExecOprCmdReply_descriptor_,
      UiExecOprCmdReply::default_instance_,
      UiExecOprCmdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiExecOprCmdReply));
  UiAgentInfo_descriptor_ = file->message_type(31);
  static const int UiAgentInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, passwd_),
  };
  UiAgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentInfo_descriptor_,
      UiAgentInfo::default_instance_,
      UiAgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentInfo));
  UiAgentInfoReply_descriptor_ = file->message_type(32);
  static const int UiAgentInfoReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, agentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, err_),
  };
  UiAgentInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentInfoReply_descriptor_,
      UiAgentInfoReply::default_instance_,
      UiAgentInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentInfoReply));
  UiInvalidAgentInfo_descriptor_ = file->message_type(33);
  static const int UiInvalidAgentInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, passwd_),
  };
  UiInvalidAgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiInvalidAgentInfo_descriptor_,
      UiInvalidAgentInfo::default_instance_,
      UiInvalidAgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiInvalidAgentInfo));
  UiInvalidAgentInfoReply_descriptor_ = file->message_type(34);
  static const int UiInvalidAgentInfoReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, agentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, err_),
  };
  UiInvalidAgentInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiInvalidAgentInfoReply_descriptor_,
      UiInvalidAgentInfoReply::default_instance_,
      UiInvalidAgentInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiInvalidAgentInfoReply));
  UiTaskScriptInfo_descriptor_ = file->message_type(35);
  static const int UiTaskScriptInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, task_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, passwd_),
  };
  UiTaskScriptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskScriptInfo_descriptor_,
      UiTaskScriptInfo::default_instance_,
      UiTaskScriptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskScriptInfo));
  UiTaskScriptInfoReply_descriptor_ = file->message_type(36);
  static const int UiTaskScriptInfoReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, md5_),
  };
  UiTaskScriptInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskScriptInfoReply_descriptor_,
      UiTaskScriptInfoReply::default_instance_,
      UiTaskScriptInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskScriptInfoReply));
  UiOprScriptInfo_descriptor_ = file->message_type(37);
  static const int UiOprScriptInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, opr_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, passwd_),
  };
  UiOprScriptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiOprScriptInfo_descriptor_,
      UiOprScriptInfo::default_instance_,
      UiOprScriptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiOprScriptInfo));
  UiOprScriptInfoReply_descriptor_ = file->message_type(38);
  static const int UiOprScriptInfoReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, md5_),
  };
  UiOprScriptInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiOprScriptInfoReply_descriptor_,
      UiOprScriptInfoReply::default_instance_,
      UiOprScriptInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiOprScriptInfoReply));
  UiAgentTaskProcess_descriptor_ = file->message_type(39);
  static const int UiAgentTaskProcess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, passwd_),
  };
  UiAgentTaskProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentTaskProcess_descriptor_,
      UiAgentTaskProcess::default_instance_,
      UiAgentTaskProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentTaskProcess));
  UiAgentTaskProcessReply_descriptor_ = file->message_type(40);
  static const int UiAgentTaskProcessReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, err_),
  };
  UiAgentTaskProcessReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentTaskProcessReply_descriptor_,
      UiAgentTaskProcessReply::default_instance_,
      UiAgentTaskProcessReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentTaskProcessReply));
  UiTaskCmd_descriptor_ = file->message_type(41);
  static const int UiTaskCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, svr_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, passwd_),
  };
  UiTaskCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskCmd_descriptor_,
      UiTaskCmd::default_instance_,
      UiTaskCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskCmd));
  UiTaskCmdReply_descriptor_ = file->message_type(42);
  static const int UiTaskCmdReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, cmd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, err_),
  };
  UiTaskCmdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskCmdReply_descriptor_,
      UiTaskCmdReply::default_instance_,
      UiTaskCmdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskCmdReply));
  UiTaskWatch_descriptor_ = file->message_type(43);
  static const int UiTaskWatch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatch, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatch, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatch, last_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatch, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatch, passwd_),
  };
  UiTaskWatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskWatch_descriptor_,
      UiTaskWatch::default_instance_,
      UiTaskWatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskWatch));
  UiTaskWatchReply_descriptor_ = file->message_type(44);
  static const int UiTaskWatchReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatchReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatchReply, watch_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatchReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatchReply, task_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatchReply, child_tasks_),
  };
  UiTaskWatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskWatchReply_descriptor_,
      UiTaskWatchReply::default_instance_,
      UiTaskWatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskWatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskWatchReply));
  UiTaskCancelWatch_descriptor_ = file->message_type(45);
  static const int UiTaskCancelWatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelWatch, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelWatch, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelWatch, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelWatch, passwd_),
  };
  UiTaskCancelWatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskCancelWatch_descriptor_,
      UiTaskCancelWatch::default_instance_,
      UiTaskCancelWatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelWatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelWatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskCancelWatch));
  UiTaskCancelatchReply_descriptor_ = file->message_type(46);
  static const int UiTaskCancelatchReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelatchReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelatchReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelatchReply, err_),
  };
  UiTaskCancelatchReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskCancelatchReply_descriptor_,
      UiTaskCancelatchReply::default_instance_,
      UiTaskCancelatchReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelatchReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCancelatchReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskCancelatchReply));
  DcmdMsgType_descriptor_ = file->enum_type(0);
  DcmdState_descriptor_ = file->enum_type(1);
  AgentState_descriptor_ = file->enum_type(2);
  TaskState_descriptor_ = file->enum_type(3);
  SubTaskState_descriptor_ = file->enum_type(4);
  CommandState_descriptor_ = file->enum_type(5);
  CmdType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dcmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValue_descriptor_, &KeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubTaskInfo_descriptor_, &SubTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OprInfo_descriptor_, &OprInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubTaskProcess_descriptor_, &SubTaskProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfo_descriptor_, &TaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentInfo_descriptor_, &AgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentReport_descriptor_, &AgentReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentReportReply_descriptor_, &AgentReportReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentMasterNoticeReply_descriptor_, &AgentMasterNoticeReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskCmd_descriptor_, &AgentTaskCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskCmdReply_descriptor_, &AgentTaskCmdReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentSubTaskProcess_descriptor_, &AgentSubTaskProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskResult_descriptor_, &AgentTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskResultReply_descriptor_, &AgentTaskResultReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentOprCmd_descriptor_, &AgentOprCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentOprCmdReply_descriptor_, &AgentOprCmdReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskOutput_descriptor_, &AgentTaskOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentTaskOutputReply_descriptor_, &AgentTaskOutputReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentRunningTask_descriptor_, &AgentRunningTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentRunningTaskReply_descriptor_, &AgentRunningTaskReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentRunningOpr_descriptor_, &AgentRunningOpr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentRunningOprReply_descriptor_, &AgentRunningOprReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvalidMsg_descriptor_, &InvalidMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskOutput_descriptor_, &UiTaskOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskOutputReply_descriptor_, &UiTaskOutputReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentRunningTask_descriptor_, &UiAgentRunningTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentRunningTaskReply_descriptor_, &UiAgentRunningTaskReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentRunningOpr_descriptor_, &UiAgentRunningOpr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentRunningOprReply_descriptor_, &UiAgentRunningOprReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiExecOprCmd_descriptor_, &UiExecOprCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiExecOprCmdReply_descriptor_, &UiExecOprCmdReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentInfo_descriptor_, &UiAgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentInfoReply_descriptor_, &UiAgentInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiInvalidAgentInfo_descriptor_, &UiInvalidAgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiInvalidAgentInfoReply_descriptor_, &UiInvalidAgentInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskScriptInfo_descriptor_, &UiTaskScriptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskScriptInfoReply_descriptor_, &UiTaskScriptInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiOprScriptInfo_descriptor_, &UiOprScriptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiOprScriptInfoReply_descriptor_, &UiOprScriptInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentTaskProcess_descriptor_, &UiAgentTaskProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentTaskProcessReply_descriptor_, &UiAgentTaskProcessReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskCmd_descriptor_, &UiTaskCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskCmdReply_descriptor_, &UiTaskCmdReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskWatch_descriptor_, &UiTaskWatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskWatchReply_descriptor_, &UiTaskWatchReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskCancelWatch_descriptor_, &UiTaskCancelWatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskCancelatchReply_descriptor_, &UiTaskCancelatchReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dcmd_2eproto() {
  delete KeyValue::default_instance_;
  delete KeyValue_reflection_;
  delete SubTaskInfo::default_instance_;
  delete SubTaskInfo_reflection_;
  delete OprInfo::default_instance_;
  delete OprInfo_reflection_;
  delete SubTaskProcess::default_instance_;
  delete SubTaskProcess_reflection_;
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
  delete AgentInfo::default_instance_;
  delete AgentInfo_reflection_;
  delete AgentReport::default_instance_;
  delete AgentReport_reflection_;
  delete AgentReportReply::default_instance_;
  delete AgentReportReply_reflection_;
  delete AgentMasterNoticeReply::default_instance_;
  delete AgentMasterNoticeReply_reflection_;
  delete AgentTaskCmd::default_instance_;
  delete AgentTaskCmd_reflection_;
  delete AgentTaskCmdReply::default_instance_;
  delete AgentTaskCmdReply_reflection_;
  delete AgentSubTaskProcess::default_instance_;
  delete AgentSubTaskProcess_reflection_;
  delete AgentTaskResult::default_instance_;
  delete AgentTaskResult_reflection_;
  delete AgentTaskResultReply::default_instance_;
  delete AgentTaskResultReply_reflection_;
  delete AgentOprCmd::default_instance_;
  delete AgentOprCmd_reflection_;
  delete AgentOprCmdReply::default_instance_;
  delete AgentOprCmdReply_reflection_;
  delete AgentTaskOutput::default_instance_;
  delete AgentTaskOutput_reflection_;
  delete AgentTaskOutputReply::default_instance_;
  delete AgentTaskOutputReply_reflection_;
  delete AgentRunningTask::default_instance_;
  delete AgentRunningTask_reflection_;
  delete AgentRunningTaskReply::default_instance_;
  delete AgentRunningTaskReply_reflection_;
  delete AgentRunningOpr::default_instance_;
  delete AgentRunningOpr_reflection_;
  delete AgentRunningOprReply::default_instance_;
  delete AgentRunningOprReply_reflection_;
  delete InvalidMsg::default_instance_;
  delete InvalidMsg_reflection_;
  delete UiTaskOutput::default_instance_;
  delete UiTaskOutput_reflection_;
  delete UiTaskOutputReply::default_instance_;
  delete UiTaskOutputReply_reflection_;
  delete UiAgentRunningTask::default_instance_;
  delete UiAgentRunningTask_reflection_;
  delete UiAgentRunningTaskReply::default_instance_;
  delete UiAgentRunningTaskReply_reflection_;
  delete UiAgentRunningOpr::default_instance_;
  delete UiAgentRunningOpr_reflection_;
  delete UiAgentRunningOprReply::default_instance_;
  delete UiAgentRunningOprReply_reflection_;
  delete UiExecOprCmd::default_instance_;
  delete UiExecOprCmd_reflection_;
  delete UiExecOprCmdReply::default_instance_;
  delete UiExecOprCmdReply_reflection_;
  delete UiAgentInfo::default_instance_;
  delete UiAgentInfo_reflection_;
  delete UiAgentInfoReply::default_instance_;
  delete UiAgentInfoReply_reflection_;
  delete UiInvalidAgentInfo::default_instance_;
  delete UiInvalidAgentInfo_reflection_;
  delete UiInvalidAgentInfoReply::default_instance_;
  delete UiInvalidAgentInfoReply_reflection_;
  delete UiTaskScriptInfo::default_instance_;
  delete UiTaskScriptInfo_reflection_;
  delete UiTaskScriptInfoReply::default_instance_;
  delete UiTaskScriptInfoReply_reflection_;
  delete UiOprScriptInfo::default_instance_;
  delete UiOprScriptInfo_reflection_;
  delete UiOprScriptInfoReply::default_instance_;
  delete UiOprScriptInfoReply_reflection_;
  delete UiAgentTaskProcess::default_instance_;
  delete UiAgentTaskProcess_reflection_;
  delete UiAgentTaskProcessReply::default_instance_;
  delete UiAgentTaskProcessReply_reflection_;
  delete UiTaskCmd::default_instance_;
  delete UiTaskCmd_reflection_;
  delete UiTaskCmdReply::default_instance_;
  delete UiTaskCmdReply_reflection_;
  delete UiTaskWatch::default_instance_;
  delete UiTaskWatch_reflection_;
  delete UiTaskWatchReply::default_instance_;
  delete UiTaskWatchReply_reflection_;
  delete UiTaskCancelWatch::default_instance_;
  delete UiTaskCancelWatch_reflection_;
  delete UiTaskCancelatchReply::default_instance_;
  delete UiTaskCancelatchReply_reflection_;
}

void protobuf_AddDesc_dcmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndcmd.proto\022\010dcmd_api\"&\n\010KeyValue\022\013\n\003ke"
    "y\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"f\n\013SubTaskInfo\022\020\n"
    "\010svr_name\030\001 \002(\t\022\020\n\010task_cmd\030\002 \002(\t\022\017\n\007tas"
    "k_id\030\003 \002(\t\022\022\n\nsubtask_id\030\004 \002(\t\022\016\n\006cmd_id"
    "\030\005 \002(\t\"C\n\007OprInfo\022\014\n\004name\030\001 \002(\t\022\022\n\nstart"
    "_time\030\002 \002(\t\022\026\n\016running_second\030\003 \002(\005\"5\n\016S"
    "ubTaskProcess\022\022\n\nsubtask_id\030\001 \002(\t\022\017\n\007pro"
    "cess\030\002 \001(\t\"\223\002\n\010TaskInfo\022\017\n\007task_id\030\001 \002(\t"
    "\022\'\n\ntask_state\030\002 \002(\0162\023.dcmd_api.TaskStat"
    "e\022\r\n\005order\030\003 \002(\005\022\026\n\016parent_task_id\030\004 \001(\t"
    "\022\013\n\003err\030\005 \001(\t\022\027\n\017success_subtask\030\006 \001(\005\022\026"
    "\n\016failed_subtask\030\007 \001(\005\022\025\n\rdoing_subtask\030"
    "\010 \001(\005\022\024\n\014undo_subtask\030\t \001(\005\022\034\n\024ignore_do"
    "ing_subtask\030\n \001(\005\022\035\n\025ignore_failed_subta"
    "sk\030\013 \001(\005\"w\n\tAgentInfo\022\n\n\002ip\030\001 \002(\t\022#\n\005sta"
    "te\030\002 \002(\0162\024.dcmd_api.AgentState\022\017\n\007versio"
    "n\030\003 \001(\t\022\024\n\014connected_ip\030\004 \001(\t\022\022\n\nrepored"
    "_ip\030\005 \001(\t\"1\n\013AgentReport\022\017\n\007version\030\001 \002("
    "\t\022\021\n\tagent_ips\030\002 \003(\t\"\250\001\n\020AgentReportRepl"
    "y\022\"\n\005state\030\001 \002(\0162\023.dcmd_api.DcmdState\022\013\n"
    "\003err\030\002 \001(\t\022\020\n\010heatbeat\030\003 \001(\005\022\024\n\014package_"
    "size\030\004 \001(\005\022\033\n\023opr_queue_threshold\030\005 \001(\005\022"
    "\036\n\026opr_overflow_threshold\030\006 \001(\005\"X\n\026Agent"
    "MasterNoticeReply\022\013\n\003cmd\030\001 \003(\t\0221\n\017subtas"
    "k_process\030\002 \003(\0132\030.dcmd_api.SubTaskProces"
    "s\"\320\002\n\014AgentTaskCmd\022\013\n\003cmd\030\001 \002(\t\022\020\n\010task_"
    "cmd\030\002 \002(\t\022\014\n\004ctrl\030\003 \002(\010\022\017\n\007task_id\030\004 \001(\t"
    "\022\022\n\nsubtask_id\030\005 \001(\t\022\n\n\002ip\030\006 \001(\t\022\020\n\010svr_"
    "name\030\007 \001(\t\022\020\n\010svr_pool\030\010 \001(\t\022\017\n\007svr_ver\030"
    "\t \001(\t\022\020\n\010svr_repo\030\n \001(\t\022\020\n\010svr_user\030\013 \001("
    "\t\022\023\n\013svr_env_ver\030\014 \001(\t\022\022\n\nupdate_env\030\r \001"
    "(\010\022\022\n\nupdate_ver\030\016 \001(\010\022\026\n\016output_process"
    "\030\017 \001(\010\022\016\n\006script\030\020 \001(\t\022$\n\010task_arg\030\021 \003(\013"
    "2\022.dcmd_api.KeyValue\" \n\021AgentTaskCmdRepl"
    "y\022\013\n\003cmd\030\001 \002(\t\"K\n\023AgentSubTaskProcess\022\017\n"
    "\007task_id\030\001 \002(\t\022\022\n\nsubtask_id\030\002 \002(\t\022\017\n\007pr"
    "ocess\030\003 \002(\t\"r\n\017AgentTaskResult\022\013\n\003cmd\030\001 "
    "\002(\t\022\017\n\007task_id\030\002 \002(\t\022\022\n\nsubtask_id\030\003 \002(\t"
    "\022\017\n\007success\030\004 \002(\010\022\013\n\003err\030\005 \001(\t\022\017\n\007proces"
    "s\030\006 \001(\t\"#\n\024AgentTaskResultReply\022\013\n\003cmd\030\001"
    " \002(\t\"\222\001\n\013AgentOprCmd\022\016\n\006opr_id\030\001 \002(\t\022\014\n\004"
    "name\030\002 \002(\t\022\020\n\010priority\030\003 \002(\005\022\020\n\010run_user"
    "\030\004 \002(\t\022\017\n\007timeout\030\005 \002(\005\022\016\n\006script\030\006 \002(\t\022"
    " \n\004args\030\007 \003(\0132\022.dcmd_api.KeyValue\"_\n\020Age"
    "ntOprCmdReply\022\"\n\005state\030\001 \002(\0162\023.dcmd_api."
    "DcmdState\022\016\n\006result\030\002 \002(\t\022\013\n\003err\030\003 \002(\t\022\n"
    "\n\002ip\030\004 \001(\t\"A\n\017AgentTaskOutput\022\022\n\nsubtask"
    "_id\030\001 \002(\t\022\016\n\006offset\030\002 \002(\005\022\n\n\002ip\030\003 \001(\t\"g\n"
    "\024AgentTaskOutputReply\022\"\n\005state\030\001 \002(\0162\023.d"
    "cmd_api.DcmdState\022\016\n\006result\030\002 \002(\t\022\016\n\006off"
    "set\030\003 \002(\005\022\013\n\003err\030\004 \001(\t\"0\n\020AgentRunningTa"
    "sk\022\n\n\002ip\030\001 \001(\t\022\020\n\010svr_name\030\002 \001(\t\"o\n\025Agen"
    "tRunningTaskReply\022\"\n\005state\030\001 \002(\0162\023.dcmd_"
    "api.DcmdState\022%\n\006result\030\002 \003(\0132\025.dcmd_api"
    ".SubTaskInfo\022\013\n\003err\030\003 \001(\t\"\035\n\017AgentRunnin"
    "gOpr\022\n\n\002ip\030\001 \001(\t\"j\n\024AgentRunningOprReply"
    "\022\"\n\005state\030\001 \002(\0162\023.dcmd_api.DcmdState\022!\n\006"
    "result\030\002 \003(\0132\021.dcmd_api.OprInfo\022\013\n\003err\030\003"
    " \001(\t\"\036\n\nInvalidMsg\022\020\n\010msg_type\030\001 \002(\005\"s\n\014"
    "UiTaskOutput\022\025\n\rclient_msg_id\030\001 \002(\005\022\022\n\ns"
    "ubtask_id\030\002 \002(\t\022\n\n\002ip\030\003 \002(\t\022\016\n\006offset\030\004 "
    "\002(\005\022\014\n\004user\030\005 \002(\t\022\016\n\006passwd\030\006 \002(\t\"{\n\021UiT"
    "askOutputReply\022\025\n\rclient_msg_id\030\001 \002(\005\022\"\n"
    "\005state\030\002 \002(\0162\023.dcmd_api.DcmdState\022\016\n\006res"
    "ult\030\003 \002(\t\022\016\n\006offset\030\004 \002(\005\022\013\n\003err\030\005 \001(\t\"g"
    "\n\022UiAgentRunningTask\022\025\n\rclient_msg_id\030\001 "
    "\002(\005\022\n\n\002ip\030\002 \001(\t\022\020\n\010svr_name\030\003 \001(\t\022\014\n\004use"
    "r\030\004 \002(\t\022\016\n\006passwd\030\005 \002(\t\"\210\001\n\027UiAgentRunni"
    "ngTaskReply\022\025\n\rclient_msg_id\030\001 \002(\005\022\"\n\005st"
    "ate\030\002 \002(\0162\023.dcmd_api.DcmdState\022%\n\006result"
    "\030\003 \003(\0132\025.dcmd_api.SubTaskInfo\022\013\n\003err\030\004 \001"
    "(\t\"T\n\021UiAgentRunningOpr\022\025\n\rclient_msg_id"
    "\030\001 \002(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004user\030\003 \002(\t\022\016\n\006pass"
    "wd\030\004 \002(\t\"\203\001\n\026UiAgentRunningOprReply\022\025\n\rc"
    "lient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd"
    "_api.DcmdState\022!\n\006result\030\003 \003(\0132\021.dcmd_ap"
    "i.OprInfo\022\013\n\003err\030\004 \001(\t\"u\n\014UiExecOprCmd\022\025"
    "\n\rclient_msg_id\030\001 \002(\005\022\016\n\006opr_id\030\002 \001(\t\022 \n"
    "\004args\030\003 \003(\0132\022.dcmd_api.KeyValue\022\014\n\004user\030"
    "\004 \002(\t\022\016\n\006passwd\030\005 \002(\t\"\207\001\n\021UiExecOprCmdRe"
    "ply\022\025\n\rclient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002("
    "\0162\023.dcmd_api.DcmdState\022*\n\006result\030\003 \003(\0132\032"
    ".dcmd_api.AgentOprCmdReply\022\013\n\003err\030\004 \001(\t\""
    "`\n\013UiAgentInfo\022\025\n\rclient_msg_id\030\001 \002(\005\022\013\n"
    "\003ips\030\002 \003(\t\022\017\n\007version\030\003 \002(\010\022\014\n\004user\030\004 \002("
    "\t\022\016\n\006passwd\030\005 \002(\t\"\202\001\n\020UiAgentInfoReply\022\025"
    "\n\rclient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.d"
    "cmd_api.DcmdState\022&\n\tagentinfo\030\003 \003(\0132\023.d"
    "cmd_api.AgentInfo\022\013\n\003err\030\004 \001(\t\"I\n\022UiInva"
    "lidAgentInfo\022\025\n\rclient_msg_id\030\001 \002(\005\022\014\n\004u"
    "ser\030\002 \002(\t\022\016\n\006passwd\030\003 \002(\t\"\211\001\n\027UiInvalidA"
    "gentInfoReply\022\025\n\rclient_msg_id\030\001 \002(\005\022\"\n\005"
    "state\030\002 \002(\0162\023.dcmd_api.DcmdState\022&\n\tagen"
    "tinfo\030\003 \002(\0132\023.dcmd_api.AgentInfo\022\013\n\003err\030"
    "\004 \001(\t\"Y\n\020UiTaskScriptInfo\022\025\n\rclient_msg_"
    "id\030\001 \002(\005\022\020\n\010task_cmd\030\002 \002(\t\022\014\n\004user\030\003 \002(\t"
    "\022\016\n\006passwd\030\004 \002(\t\"|\n\025UiTaskScriptInfoRepl"
    "y\022\025\n\rclient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162"
    "\023.dcmd_api.DcmdState\022\016\n\006script\030\003 \001(\t\022\013\n\003"
    "err\030\004 \001(\t\022\013\n\003md5\030\005 \001(\t\"X\n\017UiOprScriptInf"
    "o\022\025\n\rclient_msg_id\030\001 \002(\005\022\020\n\010opr_file\030\002 \002"
    "(\t\022\014\n\004user\030\003 \002(\t\022\016\n\006passwd\030\004 \002(\t\"{\n\024UiOp"
    "rScriptInfoReply\022\025\n\rclient_msg_id\030\001 \002(\005\022"
    "\"\n\005state\030\002 \002(\0162\023.dcmd_api.DcmdState\022\016\n\006s"
    "cript\030\003 \001(\t\022\013\n\003err\030\004 \001(\t\022\013\n\003md5\030\005 \001(\t\"]\n"
    "\022UiAgentTaskProcess\022\025\n\rclient_msg_id\030\001 \002"
    "(\005\022\022\n\nsubtask_id\030\002 \003(\t\022\014\n\004user\030\003 \002(\t\022\016\n\006"
    "passwd\030\004 \002(\t\"\214\001\n\027UiAgentTaskProcessReply"
    "\022\025\n\rclient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023"
    ".dcmd_api.DcmdState\022)\n\007process\030\003 \003(\0132\030.d"
    "cmd_api.SubTaskProcess\022\013\n\003err\030\004 \001(\t\"\250\001\n\t"
    "UiTaskCmd\022\025\n\rclient_msg_id\030\001 \002(\005\022\017\n\007task"
    "_id\030\002 \002(\t\022\022\n\nsubtask_id\030\003 \001(\t\022\n\n\002ip\030\004 \001("
    "\t\022\020\n\010svr_pool\030\005 \001(\t\022#\n\010cmd_type\030\006 \002(\0162\021."
    "dcmd_api.CmdType\022\014\n\004user\030\007 \002(\t\022\016\n\006passwd"
    "\030\010 \002(\t\"h\n\016UiTaskCmdReply\022\025\n\rclient_msg_i"
    "d\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd_api.DcmdSt"
    "ate\022\016\n\006cmd_id\030\003 \001(\t\022\013\n\003err\030\004 \001(\t\"g\n\013UiTa"
    "skWatch\022\025\n\rclient_msg_id\030\001 \002(\005\022\017\n\007task_i"
    "d\030\002 \002(\t\022\022\n\nlast_state\030\003 \002(\010\022\014\n\004user\030\004 \002("
    "\t\022\016\n\006passwd\030\005 \002(\t\"\260\001\n\020UiTaskWatchReply\022\025"
    "\n\rclient_msg_id\030\001 \002(\005\022(\n\013watch_state\030\002 \002"
    "(\0162\023.dcmd_api.DcmdState\022\013\n\003err\030\003 \001(\t\022%\n\t"
    "task_info\030\004 \002(\0132\022.dcmd_api.TaskInfo\022\'\n\013c"
    "hild_tasks\030\005 \003(\0132\022.dcmd_api.TaskInfo\"Y\n\021"
    "UiTaskCancelWatch\022\025\n\rclient_msg_id\030\001 \002(\005"
    "\022\017\n\007task_id\030\002 \002(\t\022\014\n\004user\030\003 \002(\t\022\016\n\006passw"
    "d\030\004 \002(\t\"_\n\025UiTaskCancelatchReply\022\025\n\rclie"
    "nt_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd_ap"
    "i.DcmdState\022\013\n\003err\030\003 \001(\t*\303\n\n\013DcmdMsgType"
    "\022\026\n\022MTYPE_AGENT_REPORT\020\001\022\030\n\024MTYPE_AGENT_"
    "REPORT_R\020\002\022\030\n\024MTYPE_AGENT_HEATBEAT\020\003\022\036\n\032"
    "MTYPE_CENTER_MASTER_NOTICE\020\005\022 \n\034MTYPE_CE"
    "NTER_MASTER_NOTICE_R\020\006\022\034\n\030MTYPE_CENTER_S"
    "UBTASK_CMD\020\007\022\036\n\032MTYPE_CENTER_SUBTASK_CMD"
    "_R\020\010\022\037\n\033MTYPE_AGENT_SUBTASK_PROCESS\020\t\022\"\n"
    "\036MTYPE_AGENT_SUBTASK_CMD_RESULT\020\013\022$\n MTY"
    "PE_AGENT_SUBTASK_CMD_RESULT_R\020\014\022\030\n\024MTYPE"
    "_CENTER_OPR_CMD\020\r\022\032\n\026MTYPE_CENTER_OPR_CM"
    "D_R\020\016\022%\n!MTYPE_CENTER_AGENT_SUBTASK_OUTP"
    "UT\020\017\022\'\n#MTYPE_CENTER_AGENT_SUBTASK_OUTPU"
    "T_R\020\020\022#\n\037MTYPE_CENTER_AGENT_RUNNING_TASK"
    "\020\021\022%\n!MTYPE_CENTER_AGENT_RUNNING_TASK_R\020"
    "\022\022\"\n\036MTYPE_CENTER_AGENT_RUNNING_OPR\020\023\022$\n"
    " MTYPE_CENTER_AGENT_RUNNING_OPR_R\020\024\022!\n\035M"
    "TYPE_UI_AGENT_SUBTASK_OUTPUT\0203\022#\n\037MTYPE_"
    "UI_AGENT_SUBTASK_OUTPUT_R\0204\022\"\n\036MTYPE_UI_"
    "AGENT_RUNNING_SUBTASK\0205\022$\n MTYPE_UI_AGEN"
    "T_RUNNING_SUBTASK_R\0206\022\036\n\032MTYPE_UI_AGENT_"
    "RUNNING_OPR\0207\022 \n\034MTYPE_UI_AGENT_RUNNING_"
    "OPR_R\0208\022\025\n\021MTYPE_UI_EXEC_OPR\0209\022\027\n\023MTYPE_"
    "UI_EXEC_OPR_R\020:\022\027\n\023MTYPE_UI_AGENT_INFO\020;"
    "\022\031\n\025MTYPE_UI_AGENT_INFO_R\020<\022\032\n\026MTYPE_UI_"
    "INVALID_AGENT\020=\022\034\n\030MTYPE_UI_INVALID_AGEN"
    "T_R\020>\022\032\n\026MTYPE_UI_TASK_CMD_INFO\020\?\022\034\n\030MTY"
    "PE_UI_TASK_CMD_INFO_R\020@\022\031\n\025MTYPE_UI_OPR_"
    "CMD_INFO\020A\022\033\n\027MTYPE_UI_OPR_CMD_INFO_R\020B\022"
    "\034\n\030MTYPE_UI_SUBTASK_PROCESS\020C\022\036\n\032MTYPE_U"
    "I_SUBTASK_PROCESS_R\020D\022\026\n\022MTYPE_UI_EXEC_T"
    "ASK\020E\022\030\n\024MTYPE_UI_EXEC_TASK_R\020F\022\027\n\023MTYPE"
    "_UI_WATCH_TASK\020G\022\031\n\025MTYPE_UI_WATCH_TASK_"
    "R\020H\022\036\n\032MTYPE_UI_CANCEL_WATCH_TASK\020I\022 \n\034M"
    "TYPE_UI_CANCEL_WATCH_TASK_R\020J\022\027\n\023MTYPE_I"
    "NVALID_MTYPE\020e*$\n\tDcmdState\022\013\n\007SUCCESS\020\000"
    "\022\n\n\006FAILED\020\001*c\n\nAgentState\022\026\n\022AGENT_UN_C"
    "ONNECTED\020\000\022\021\n\rAGENT_UN_AUTH\020\001\022\025\n\021AGENT_U"
    "N_REPORTED\020\002\022\023\n\017AGENT_CONNECTED\020\003*\220\001\n\tTa"
    "skState\022\r\n\tTASK_INIT\020\000\022\016\n\nTASK_DOING\020\001\022\017"
    "\n\013TASK_PAUSED\020\002\022\017\n\013TASK_FAILED\020\003\022\020\n\014TASK"
    "_FREEZED\020\004\022\021\n\rTASK_FINISHED\020\005\022\035\n\031TASK_FI"
    "NISHED_WITH_FAILED\020\006*]\n\014SubTaskState\022\020\n\014"
    "SUBTASK_INIT\020\000\022\021\n\rSUBTASK_DOING\020\001\022\024\n\020SUB"
    "TASK_FINISHED\020\002\022\022\n\016SUBTASK_FAILED\020\003*J\n\014C"
    "ommandState\022\021\n\rCOMMAND_DOING\020\000\022\023\n\017COMMAN"
    "D_SUCCESS\020\001\022\022\n\016COMMAND_FAILED\020\002*\347\002\n\007CmdT"
    "ype\022\017\n\013CMD_UNKNOWN\020\000\022\022\n\016CMD_START_TASK\020\001"
    "\022\022\n\016CMD_PAUSE_TASK\020\002\022\023\n\017CMD_FINISH_TASK\020"
    "\003\022\026\n\022CMD_CANCEL_SUBTASK\020\004\022\032\n\026CMD_CANCEL_"
    "SVR_SUBTASK\020\005\022\021\n\rCMD_REDO_TASK\020\006\022\025\n\021CMD_"
    "REDO_SVR_POOL\020\007\022\024\n\020CMD_REDO_SUBTASK\020\010\022\033\n"
    "\027CMD_REDO_FAILED_SUBTASK\020\t\022$\n CMD_REDO_F"
    "AILED_SVR_POOL_SUBTASK\020\n\022\026\n\022CMD_IGNORE_S"
    "UBTASK\020\013\022\023\n\017CMD_FREEZE_TASK\020\014\022\025\n\021CMD_UNF"
    "REEZE_TASK\020\r\022\023\n\017CMD_UPDATE_TASK\020\016B\021\n\017com"
    ".cwinux.dcmd", 7372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dcmd.proto", &protobuf_RegisterTypes);
  KeyValue::default_instance_ = new KeyValue();
  SubTaskInfo::default_instance_ = new SubTaskInfo();
  OprInfo::default_instance_ = new OprInfo();
  SubTaskProcess::default_instance_ = new SubTaskProcess();
  TaskInfo::default_instance_ = new TaskInfo();
  AgentInfo::default_instance_ = new AgentInfo();
  AgentReport::default_instance_ = new AgentReport();
  AgentReportReply::default_instance_ = new AgentReportReply();
  AgentMasterNoticeReply::default_instance_ = new AgentMasterNoticeReply();
  AgentTaskCmd::default_instance_ = new AgentTaskCmd();
  AgentTaskCmdReply::default_instance_ = new AgentTaskCmdReply();
  AgentSubTaskProcess::default_instance_ = new AgentSubTaskProcess();
  AgentTaskResult::default_instance_ = new AgentTaskResult();
  AgentTaskResultReply::default_instance_ = new AgentTaskResultReply();
  AgentOprCmd::default_instance_ = new AgentOprCmd();
  AgentOprCmdReply::default_instance_ = new AgentOprCmdReply();
  AgentTaskOutput::default_instance_ = new AgentTaskOutput();
  AgentTaskOutputReply::default_instance_ = new AgentTaskOutputReply();
  AgentRunningTask::default_instance_ = new AgentRunningTask();
  AgentRunningTaskReply::default_instance_ = new AgentRunningTaskReply();
  AgentRunningOpr::default_instance_ = new AgentRunningOpr();
  AgentRunningOprReply::default_instance_ = new AgentRunningOprReply();
  InvalidMsg::default_instance_ = new InvalidMsg();
  UiTaskOutput::default_instance_ = new UiTaskOutput();
  UiTaskOutputReply::default_instance_ = new UiTaskOutputReply();
  UiAgentRunningTask::default_instance_ = new UiAgentRunningTask();
  UiAgentRunningTaskReply::default_instance_ = new UiAgentRunningTaskReply();
  UiAgentRunningOpr::default_instance_ = new UiAgentRunningOpr();
  UiAgentRunningOprReply::default_instance_ = new UiAgentRunningOprReply();
  UiExecOprCmd::default_instance_ = new UiExecOprCmd();
  UiExecOprCmdReply::default_instance_ = new UiExecOprCmdReply();
  UiAgentInfo::default_instance_ = new UiAgentInfo();
  UiAgentInfoReply::default_instance_ = new UiAgentInfoReply();
  UiInvalidAgentInfo::default_instance_ = new UiInvalidAgentInfo();
  UiInvalidAgentInfoReply::default_instance_ = new UiInvalidAgentInfoReply();
  UiTaskScriptInfo::default_instance_ = new UiTaskScriptInfo();
  UiTaskScriptInfoReply::default_instance_ = new UiTaskScriptInfoReply();
  UiOprScriptInfo::default_instance_ = new UiOprScriptInfo();
  UiOprScriptInfoReply::default_instance_ = new UiOprScriptInfoReply();
  UiAgentTaskProcess::default_instance_ = new UiAgentTaskProcess();
  UiAgentTaskProcessReply::default_instance_ = new UiAgentTaskProcessReply();
  UiTaskCmd::default_instance_ = new UiTaskCmd();
  UiTaskCmdReply::default_instance_ = new UiTaskCmdReply();
  UiTaskWatch::default_instance_ = new UiTaskWatch();
  UiTaskWatchReply::default_instance_ = new UiTaskWatchReply();
  UiTaskCancelWatch::default_instance_ = new UiTaskCancelWatch();
  UiTaskCancelatchReply::default_instance_ = new UiTaskCancelatchReply();
  KeyValue::default_instance_->InitAsDefaultInstance();
  SubTaskInfo::default_instance_->InitAsDefaultInstance();
  OprInfo::default_instance_->InitAsDefaultInstance();
  SubTaskProcess::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  AgentInfo::default_instance_->InitAsDefaultInstance();
  AgentReport::default_instance_->InitAsDefaultInstance();
  AgentReportReply::default_instance_->InitAsDefaultInstance();
  AgentMasterNoticeReply::default_instance_->InitAsDefaultInstance();
  AgentTaskCmd::default_instance_->InitAsDefaultInstance();
  AgentTaskCmdReply::default_instance_->InitAsDefaultInstance();
  AgentSubTaskProcess::default_instance_->InitAsDefaultInstance();
  AgentTaskResult::default_instance_->InitAsDefaultInstance();
  AgentTaskResultReply::default_instance_->InitAsDefaultInstance();
  AgentOprCmd::default_instance_->InitAsDefaultInstance();
  AgentOprCmdReply::default_instance_->InitAsDefaultInstance();
  AgentTaskOutput::default_instance_->InitAsDefaultInstance();
  AgentTaskOutputReply::default_instance_->InitAsDefaultInstance();
  AgentRunningTask::default_instance_->InitAsDefaultInstance();
  AgentRunningTaskReply::default_instance_->InitAsDefaultInstance();
  AgentRunningOpr::default_instance_->InitAsDefaultInstance();
  AgentRunningOprReply::default_instance_->InitAsDefaultInstance();
  InvalidMsg::default_instance_->InitAsDefaultInstance();
  UiTaskOutput::default_instance_->InitAsDefaultInstance();
  UiTaskOutputReply::default_instance_->InitAsDefaultInstance();
  UiAgentRunningTask::default_instance_->InitAsDefaultInstance();
  UiAgentRunningTaskReply::default_instance_->InitAsDefaultInstance();
  UiAgentRunningOpr::default_instance_->InitAsDefaultInstance();
  UiAgentRunningOprReply::default_instance_->InitAsDefaultInstance();
  UiExecOprCmd::default_instance_->InitAsDefaultInstance();
  UiExecOprCmdReply::default_instance_->InitAsDefaultInstance();
  UiAgentInfo::default_instance_->InitAsDefaultInstance();
  UiAgentInfoReply::default_instance_->InitAsDefaultInstance();
  UiInvalidAgentInfo::default_instance_->InitAsDefaultInstance();
  UiInvalidAgentInfoReply::default_instance_->InitAsDefaultInstance();
  UiTaskScriptInfo::default_instance_->InitAsDefaultInstance();
  UiTaskScriptInfoReply::default_instance_->InitAsDefaultInstance();
  UiOprScriptInfo::default_instance_->InitAsDefaultInstance();
  UiOprScriptInfoReply::default_instance_->InitAsDefaultInstance();
  UiAgentTaskProcess::default_instance_->InitAsDefaultInstance();
  UiAgentTaskProcessReply::default_instance_->InitAsDefaultInstance();
  UiTaskCmd::default_instance_->InitAsDefaultInstance();
  UiTaskCmdReply::default_instance_->InitAsDefaultInstance();
  UiTaskWatch::default_instance_->InitAsDefaultInstance();
  UiTaskWatchReply::default_instance_->InitAsDefaultInstance();
  UiTaskCancelWatch::default_instance_->InitAsDefaultInstance();
  UiTaskCancelatchReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dcmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dcmd_2eproto {
  StaticDescriptorInitializer_dcmd_2eproto() {
    protobuf_AddDesc_dcmd_2eproto();
  }
} static_descriptor_initializer_dcmd_2eproto_;

const ::google::protobuf::EnumDescriptor* DcmdMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DcmdMsgType_descriptor_;
}
bool DcmdMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DcmdState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DcmdState_descriptor_;
}
bool DcmdState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AgentState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentState_descriptor_;
}
bool AgentState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskState_descriptor_;
}
bool TaskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubTaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubTaskState_descriptor_;
}
bool SubTaskState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommandState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandState_descriptor_;
}
bool CommandState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdType_descriptor_;
}
bool CmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !_MSC_VER

KeyValue::KeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValue::InitAsDefaultInstance() {
}

KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValue::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValue::~KeyValue() {
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValue_descriptor_;
}

const KeyValue& KeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

KeyValue* KeyValue::default_instance_ = NULL;

KeyValue* KeyValue::New() const {
  return new KeyValue;
}

void KeyValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValue_descriptor_;
  metadata.reflection = KeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubTaskInfo::kSvrNameFieldNumber;
const int SubTaskInfo::kTaskCmdFieldNumber;
const int SubTaskInfo::kTaskIdFieldNumber;
const int SubTaskInfo::kSubtaskIdFieldNumber;
const int SubTaskInfo::kCmdIdFieldNumber;
#endif  // !_MSC_VER

SubTaskInfo::SubTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubTaskInfo::InitAsDefaultInstance() {
}

SubTaskInfo::SubTaskInfo(const SubTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubTaskInfo::~SubTaskInfo() {
  SharedDtor();
}

void SubTaskInfo::SharedDtor() {
  if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_name_;
  }
  if (task_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete task_cmd_;
  }
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (cmd_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_id_;
  }
  if (this != default_instance_) {
  }
}

void SubTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubTaskInfo_descriptor_;
}

const SubTaskInfo& SubTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

SubTaskInfo* SubTaskInfo::default_instance_ = NULL;

SubTaskInfo* SubTaskInfo::New() const {
  return new SubTaskInfo;
}

void SubTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_svr_name()) {
      if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
        svr_name_->clear();
      }
    }
    if (has_task_cmd()) {
      if (task_cmd_ != &::google::protobuf::internal::kEmptyString) {
        task_cmd_->clear();
      }
    }
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    if (has_cmd_id()) {
      if (cmd_id_ != &::google::protobuf::internal::kEmptyString) {
        cmd_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string svr_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_name().data(), this->svr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_cmd;
        break;
      }
      
      // required string task_cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_cmd().data(), this->task_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_id;
        break;
      }
      
      // required string task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subtask_id;
        break;
      }
      
      // required string subtask_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cmd_id;
        break;
      }
      
      // required string cmd_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd_id().data(), this->cmd_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string svr_name = 1;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->svr_name(), output);
  }
  
  // required string task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_cmd().data(), this->task_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_cmd(), output);
  }
  
  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->task_id(), output);
  }
  
  // required string subtask_id = 4;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->subtask_id(), output);
  }
  
  // required string cmd_id = 5;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd_id().data(), this->cmd_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cmd_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string svr_name = 1;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->svr_name(), target);
  }
  
  // required string task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_cmd().data(), this->task_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_cmd(), target);
  }
  
  // required string task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->task_id(), target);
  }
  
  // required string subtask_id = 4;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->subtask_id(), target);
  }
  
  // required string cmd_id = 5;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd_id().data(), this->cmd_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cmd_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubTaskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string svr_name = 1;
    if (has_svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_name());
    }
    
    // required string task_cmd = 2;
    if (has_task_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_cmd());
    }
    
    // required string task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // required string subtask_id = 4;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }
    
    // required string cmd_id = 5;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubTaskInfo::MergeFrom(const SubTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_name()) {
      set_svr_name(from.svr_name());
    }
    if (from.has_task_cmd()) {
      set_task_cmd(from.task_cmd());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubTaskInfo::CopyFrom(const SubTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubTaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void SubTaskInfo::Swap(SubTaskInfo* other) {
  if (other != this) {
    std::swap(svr_name_, other->svr_name_);
    std::swap(task_cmd_, other->task_cmd_);
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(cmd_id_, other->cmd_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubTaskInfo_descriptor_;
  metadata.reflection = SubTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OprInfo::kNameFieldNumber;
const int OprInfo::kStartTimeFieldNumber;
const int OprInfo::kRunningSecondFieldNumber;
#endif  // !_MSC_VER

OprInfo::OprInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OprInfo::InitAsDefaultInstance() {
}

OprInfo::OprInfo(const OprInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OprInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  running_second_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OprInfo::~OprInfo() {
  SharedDtor();
}

void OprInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (this != default_instance_) {
  }
}

void OprInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OprInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OprInfo_descriptor_;
}

const OprInfo& OprInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

OprInfo* OprInfo::default_instance_ = NULL;

OprInfo* OprInfo::New() const {
  return new OprInfo;
}

void OprInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::kEmptyString) {
        start_time_->clear();
      }
    }
    running_second_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OprInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_start_time;
        break;
      }
      
      // required string start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_running_second;
        break;
      }
      
      // required int32 running_second = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_running_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &running_second_)));
          set_has_running_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OprInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->start_time(), output);
  }
  
  // required int32 running_second = 3;
  if (has_running_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->running_second(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OprInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->start_time(), target);
  }
  
  // required int32 running_second = 3;
  if (has_running_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->running_second(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OprInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }
    
    // required int32 running_second = 3;
    if (has_running_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->running_second());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OprInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OprInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OprInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OprInfo::MergeFrom(const OprInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_running_second()) {
      set_running_second(from.running_second());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OprInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OprInfo::CopyFrom(const OprInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OprInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void OprInfo::Swap(OprInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(start_time_, other->start_time_);
    std::swap(running_second_, other->running_second_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OprInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OprInfo_descriptor_;
  metadata.reflection = OprInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubTaskProcess::kSubtaskIdFieldNumber;
const int SubTaskProcess::kProcessFieldNumber;
#endif  // !_MSC_VER

SubTaskProcess::SubTaskProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubTaskProcess::InitAsDefaultInstance() {
}

SubTaskProcess::SubTaskProcess(const SubTaskProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubTaskProcess::SharedCtor() {
  _cached_size_ = 0;
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubTaskProcess::~SubTaskProcess() {
  SharedDtor();
}

void SubTaskProcess::SharedDtor() {
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (process_ != &::google::protobuf::internal::kEmptyString) {
    delete process_;
  }
  if (this != default_instance_) {
  }
}

void SubTaskProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubTaskProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubTaskProcess_descriptor_;
}

const SubTaskProcess& SubTaskProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

SubTaskProcess* SubTaskProcess::default_instance_ = NULL;

SubTaskProcess* SubTaskProcess::New() const {
  return new SubTaskProcess;
}

void SubTaskProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    if (has_process()) {
      if (process_ != &::google::protobuf::internal::kEmptyString) {
        process_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubTaskProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subtask_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_process;
        break;
      }
      
      // optional string process = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process().data(), this->process().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubTaskProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string subtask_id = 1;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->subtask_id(), output);
  }
  
  // optional string process = 2;
  if (has_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process().data(), this->process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->process(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubTaskProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string subtask_id = 1;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subtask_id(), target);
  }
  
  // optional string process = 2;
  if (has_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process().data(), this->process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->process(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubTaskProcess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string subtask_id = 1;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }
    
    // optional string process = 2;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubTaskProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubTaskProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubTaskProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubTaskProcess::MergeFrom(const SubTaskProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubTaskProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubTaskProcess::CopyFrom(const SubTaskProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubTaskProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SubTaskProcess::Swap(SubTaskProcess* other) {
  if (other != this) {
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubTaskProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubTaskProcess_descriptor_;
  metadata.reflection = SubTaskProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kTaskStateFieldNumber;
const int TaskInfo::kOrderFieldNumber;
const int TaskInfo::kParentTaskIdFieldNumber;
const int TaskInfo::kErrFieldNumber;
const int TaskInfo::kSuccessSubtaskFieldNumber;
const int TaskInfo::kFailedSubtaskFieldNumber;
const int TaskInfo::kDoingSubtaskFieldNumber;
const int TaskInfo::kUndoSubtaskFieldNumber;
const int TaskInfo::kIgnoreDoingSubtaskFieldNumber;
const int TaskInfo::kIgnoreFailedSubtaskFieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_state_ = 0;
  order_ = 0;
  parent_task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  success_subtask_ = 0;
  failed_subtask_ = 0;
  doing_subtask_ = 0;
  undo_subtask_ = 0;
  ignore_doing_subtask_ = 0;
  ignore_failed_subtask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (parent_task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_task_id_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    task_state_ = 0;
    order_ = 0;
    if (has_parent_task_id()) {
      if (parent_task_id_ != &::google::protobuf::internal::kEmptyString) {
        parent_task_id_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    success_subtask_ = 0;
    failed_subtask_ = 0;
    doing_subtask_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    undo_subtask_ = 0;
    ignore_doing_subtask_ = 0;
    ignore_failed_subtask_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_state;
        break;
      }
      
      // required .dcmd_api.TaskState task_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::TaskState_IsValid(value)) {
            set_task_state(static_cast< dcmd_api::TaskState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }
      
      // required int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parent_task_id;
        break;
      }
      
      // optional string parent_task_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parent_task_id().data(), this->parent_task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_err;
        break;
      }
      
      // optional string err = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_success_subtask;
        break;
      }
      
      // optional int32 success_subtask = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_subtask_)));
          set_has_success_subtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_failed_subtask;
        break;
      }
      
      // optional int32 failed_subtask = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failed_subtask_)));
          set_has_failed_subtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_doing_subtask;
        break;
      }
      
      // optional int32 doing_subtask = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doing_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doing_subtask_)));
          set_has_doing_subtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_undo_subtask;
        break;
      }
      
      // optional int32 undo_subtask = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undo_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &undo_subtask_)));
          set_has_undo_subtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ignore_doing_subtask;
        break;
      }
      
      // optional int32 ignore_doing_subtask = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_doing_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_doing_subtask_)));
          set_has_ignore_doing_subtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ignore_failed_subtask;
        break;
      }
      
      // optional int32 ignore_failed_subtask = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignore_failed_subtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ignore_failed_subtask_)));
          set_has_ignore_failed_subtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->task_id(), output);
  }
  
  // required .dcmd_api.TaskState task_state = 2;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->task_state(), output);
  }
  
  // required int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }
  
  // optional string parent_task_id = 4;
  if (has_parent_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent_task_id().data(), this->parent_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->parent_task_id(), output);
  }
  
  // optional string err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->err(), output);
  }
  
  // optional int32 success_subtask = 6;
  if (has_success_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->success_subtask(), output);
  }
  
  // optional int32 failed_subtask = 7;
  if (has_failed_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->failed_subtask(), output);
  }
  
  // optional int32 doing_subtask = 8;
  if (has_doing_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->doing_subtask(), output);
  }
  
  // optional int32 undo_subtask = 9;
  if (has_undo_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->undo_subtask(), output);
  }
  
  // optional int32 ignore_doing_subtask = 10;
  if (has_ignore_doing_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ignore_doing_subtask(), output);
  }
  
  // optional int32 ignore_failed_subtask = 11;
  if (has_ignore_failed_subtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ignore_failed_subtask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->task_id(), target);
  }
  
  // required .dcmd_api.TaskState task_state = 2;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->task_state(), target);
  }
  
  // required int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }
  
  // optional string parent_task_id = 4;
  if (has_parent_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent_task_id().data(), this->parent_task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->parent_task_id(), target);
  }
  
  // optional string err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->err(), target);
  }
  
  // optional int32 success_subtask = 6;
  if (has_success_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->success_subtask(), target);
  }
  
  // optional int32 failed_subtask = 7;
  if (has_failed_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->failed_subtask(), target);
  }
  
  // optional int32 doing_subtask = 8;
  if (has_doing_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->doing_subtask(), target);
  }
  
  // optional int32 undo_subtask = 9;
  if (has_undo_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->undo_subtask(), target);
  }
  
  // optional int32 ignore_doing_subtask = 10;
  if (has_ignore_doing_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ignore_doing_subtask(), target);
  }
  
  // optional int32 ignore_failed_subtask = 11;
  if (has_ignore_failed_subtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ignore_failed_subtask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // required .dcmd_api.TaskState task_state = 2;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_state());
    }
    
    // required int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }
    
    // optional string parent_task_id = 4;
    if (has_parent_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent_task_id());
    }
    
    // optional string err = 5;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
    // optional int32 success_subtask = 6;
    if (has_success_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success_subtask());
    }
    
    // optional int32 failed_subtask = 7;
    if (has_failed_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failed_subtask());
    }
    
    // optional int32 doing_subtask = 8;
    if (has_doing_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doing_subtask());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 undo_subtask = 9;
    if (has_undo_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undo_subtask());
    }
    
    // optional int32 ignore_doing_subtask = 10;
    if (has_ignore_doing_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_doing_subtask());
    }
    
    // optional int32 ignore_failed_subtask = 11;
    if (has_ignore_failed_subtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ignore_failed_subtask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_parent_task_id()) {
      set_parent_task_id(from.parent_task_id());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_success_subtask()) {
      set_success_subtask(from.success_subtask());
    }
    if (from.has_failed_subtask()) {
      set_failed_subtask(from.failed_subtask());
    }
    if (from.has_doing_subtask()) {
      set_doing_subtask(from.doing_subtask());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_undo_subtask()) {
      set_undo_subtask(from.undo_subtask());
    }
    if (from.has_ignore_doing_subtask()) {
      set_ignore_doing_subtask(from.ignore_doing_subtask());
    }
    if (from.has_ignore_failed_subtask()) {
      set_ignore_failed_subtask(from.ignore_failed_subtask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(task_state_, other->task_state_);
    std::swap(order_, other->order_);
    std::swap(parent_task_id_, other->parent_task_id_);
    std::swap(err_, other->err_);
    std::swap(success_subtask_, other->success_subtask_);
    std::swap(failed_subtask_, other->failed_subtask_);
    std::swap(doing_subtask_, other->doing_subtask_);
    std::swap(undo_subtask_, other->undo_subtask_);
    std::swap(ignore_doing_subtask_, other->ignore_doing_subtask_);
    std::swap(ignore_failed_subtask_, other->ignore_failed_subtask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentInfo::kIpFieldNumber;
const int AgentInfo::kStateFieldNumber;
const int AgentInfo::kVersionFieldNumber;
const int AgentInfo::kConnectedIpFieldNumber;
const int AgentInfo::kReporedIpFieldNumber;
#endif  // !_MSC_VER

AgentInfo::AgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentInfo::InitAsDefaultInstance() {
}

AgentInfo::AgentInfo(const AgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connected_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repored_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentInfo::~AgentInfo() {
  SharedDtor();
}

void AgentInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (connected_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete connected_ip_;
  }
  if (repored_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete repored_ip_;
  }
  if (this != default_instance_) {
  }
}

void AgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentInfo_descriptor_;
}

const AgentInfo& AgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentInfo* AgentInfo::default_instance_ = NULL;

AgentInfo* AgentInfo::New() const {
  return new AgentInfo;
}

void AgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    state_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_connected_ip()) {
      if (connected_ip_ != &::google::protobuf::internal::kEmptyString) {
        connected_ip_->clear();
      }
    }
    if (has_repored_ip()) {
      if (repored_ip_ != &::google::protobuf::internal::kEmptyString) {
        repored_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.AgentState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::AgentState_IsValid(value)) {
            set_state(static_cast< dcmd_api::AgentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }
      
      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_connected_ip;
        break;
      }
      
      // optional string connected_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connected_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connected_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connected_ip().data(), this->connected_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_repored_ip;
        break;
      }
      
      // optional string repored_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repored_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repored_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->repored_ip().data(), this->repored_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // required .dcmd_api.AgentState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }
  
  // optional string connected_ip = 4;
  if (has_connected_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connected_ip().data(), this->connected_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->connected_ip(), output);
  }
  
  // optional string repored_ip = 5;
  if (has_repored_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->repored_ip().data(), this->repored_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->repored_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // required .dcmd_api.AgentState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }
  
  // optional string connected_ip = 4;
  if (has_connected_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connected_ip().data(), this->connected_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->connected_ip(), target);
  }
  
  // optional string repored_ip = 5;
  if (has_repored_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->repored_ip().data(), this->repored_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->repored_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required .dcmd_api.AgentState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string connected_ip = 4;
    if (has_connected_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connected_ip());
    }
    
    // optional string repored_ip = 5;
    if (has_repored_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->repored_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentInfo::MergeFrom(const AgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_connected_ip()) {
      set_connected_ip(from.connected_ip());
    }
    if (from.has_repored_ip()) {
      set_repored_ip(from.repored_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AgentInfo::Swap(AgentInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(state_, other->state_);
    std::swap(version_, other->version_);
    std::swap(connected_ip_, other->connected_ip_);
    std::swap(repored_ip_, other->repored_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentInfo_descriptor_;
  metadata.reflection = AgentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentReport::kVersionFieldNumber;
const int AgentReport::kAgentIpsFieldNumber;
#endif  // !_MSC_VER

AgentReport::AgentReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentReport::InitAsDefaultInstance() {
}

AgentReport::AgentReport(const AgentReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentReport::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentReport::~AgentReport() {
  SharedDtor();
}

void AgentReport::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void AgentReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentReport_descriptor_;
}

const AgentReport& AgentReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentReport* AgentReport::default_instance_ = NULL;

AgentReport* AgentReport::New() const {
  return new AgentReport;
}

void AgentReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  agent_ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agent_ips;
        break;
      }
      
      // repeated string agent_ips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_agent_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent_ips(0).data(), this->agent_ips(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agent_ips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }
  
  // repeated string agent_ips = 2;
  for (int i = 0; i < this->agent_ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->agent_ips(i).data(), this->agent_ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->agent_ips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }
  
  // repeated string agent_ips = 2;
  for (int i = 0; i < this->agent_ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent_ips(i).data(), this->agent_ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->agent_ips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
  }
  // repeated string agent_ips = 2;
  total_size += 1 * this->agent_ips_size();
  for (int i = 0; i < this->agent_ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->agent_ips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentReport::MergeFrom(const AgentReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  agent_ips_.MergeFrom(from.agent_ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentReport::CopyFrom(const AgentReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AgentReport::Swap(AgentReport* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    agent_ips_.Swap(&other->agent_ips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentReport_descriptor_;
  metadata.reflection = AgentReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentReportReply::kStateFieldNumber;
const int AgentReportReply::kErrFieldNumber;
const int AgentReportReply::kHeatbeatFieldNumber;
const int AgentReportReply::kPackageSizeFieldNumber;
const int AgentReportReply::kOprQueueThresholdFieldNumber;
const int AgentReportReply::kOprOverflowThresholdFieldNumber;
#endif  // !_MSC_VER

AgentReportReply::AgentReportReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentReportReply::InitAsDefaultInstance() {
}

AgentReportReply::AgentReportReply(const AgentReportReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentReportReply::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  heatbeat_ = 0;
  package_size_ = 0;
  opr_queue_threshold_ = 0;
  opr_overflow_threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentReportReply::~AgentReportReply() {
  SharedDtor();
}

void AgentReportReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void AgentReportReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentReportReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentReportReply_descriptor_;
}

const AgentReportReply& AgentReportReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentReportReply* AgentReportReply::default_instance_ = NULL;

AgentReportReply* AgentReportReply::New() const {
  return new AgentReportReply;
}

void AgentReportReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    heatbeat_ = 0;
    package_size_ = 0;
    opr_queue_threshold_ = 0;
    opr_overflow_threshold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentReportReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_err;
        break;
      }
      
      // optional string err = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heatbeat;
        break;
      }
      
      // optional int32 heatbeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heatbeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heatbeat_)));
          set_has_heatbeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_package_size;
        break;
      }
      
      // optional int32 package_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_package_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_size_)));
          set_has_package_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_opr_queue_threshold;
        break;
      }
      
      // optional int32 opr_queue_threshold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opr_queue_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opr_queue_threshold_)));
          set_has_opr_queue_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_opr_overflow_threshold;
        break;
      }
      
      // optional int32 opr_overflow_threshold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opr_overflow_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opr_overflow_threshold_)));
          set_has_opr_overflow_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentReportReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // optional string err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->err(), output);
  }
  
  // optional int32 heatbeat = 3;
  if (has_heatbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->heatbeat(), output);
  }
  
  // optional int32 package_size = 4;
  if (has_package_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->package_size(), output);
  }
  
  // optional int32 opr_queue_threshold = 5;
  if (has_opr_queue_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->opr_queue_threshold(), output);
  }
  
  // optional int32 opr_overflow_threshold = 6;
  if (has_opr_overflow_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->opr_overflow_threshold(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentReportReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // optional string err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->err(), target);
  }
  
  // optional int32 heatbeat = 3;
  if (has_heatbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->heatbeat(), target);
  }
  
  // optional int32 package_size = 4;
  if (has_package_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->package_size(), target);
  }
  
  // optional int32 opr_queue_threshold = 5;
  if (has_opr_queue_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->opr_queue_threshold(), target);
  }
  
  // optional int32 opr_overflow_threshold = 6;
  if (has_opr_overflow_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->opr_overflow_threshold(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentReportReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
    // optional int32 heatbeat = 3;
    if (has_heatbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heatbeat());
    }
    
    // optional int32 package_size = 4;
    if (has_package_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_size());
    }
    
    // optional int32 opr_queue_threshold = 5;
    if (has_opr_queue_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opr_queue_threshold());
    }
    
    // optional int32 opr_overflow_threshold = 6;
    if (has_opr_overflow_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opr_overflow_threshold());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentReportReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentReportReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentReportReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentReportReply::MergeFrom(const AgentReportReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_heatbeat()) {
      set_heatbeat(from.heatbeat());
    }
    if (from.has_package_size()) {
      set_package_size(from.package_size());
    }
    if (from.has_opr_queue_threshold()) {
      set_opr_queue_threshold(from.opr_queue_threshold());
    }
    if (from.has_opr_overflow_threshold()) {
      set_opr_overflow_threshold(from.opr_overflow_threshold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentReportReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentReportReply::CopyFrom(const AgentReportReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentReportReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AgentReportReply::Swap(AgentReportReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(err_, other->err_);
    std::swap(heatbeat_, other->heatbeat_);
    std::swap(package_size_, other->package_size_);
    std::swap(opr_queue_threshold_, other->opr_queue_threshold_);
    std::swap(opr_overflow_threshold_, other->opr_overflow_threshold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentReportReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentReportReply_descriptor_;
  metadata.reflection = AgentReportReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentMasterNoticeReply::kCmdFieldNumber;
const int AgentMasterNoticeReply::kSubtaskProcessFieldNumber;
#endif  // !_MSC_VER

AgentMasterNoticeReply::AgentMasterNoticeReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentMasterNoticeReply::InitAsDefaultInstance() {
}

AgentMasterNoticeReply::AgentMasterNoticeReply(const AgentMasterNoticeReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentMasterNoticeReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentMasterNoticeReply::~AgentMasterNoticeReply() {
  SharedDtor();
}

void AgentMasterNoticeReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgentMasterNoticeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentMasterNoticeReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentMasterNoticeReply_descriptor_;
}

const AgentMasterNoticeReply& AgentMasterNoticeReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentMasterNoticeReply* AgentMasterNoticeReply::default_instance_ = NULL;

AgentMasterNoticeReply* AgentMasterNoticeReply::New() const {
  return new AgentMasterNoticeReply;
}

void AgentMasterNoticeReply::Clear() {
  cmd_.Clear();
  subtask_process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentMasterNoticeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd(0).data(), this->cmd(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cmd;
        if (input->ExpectTag(18)) goto parse_subtask_process;
        break;
      }
      
      // repeated .dcmd_api.SubTaskProcess subtask_process = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subtask_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtask_process;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentMasterNoticeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string cmd = 1;
  for (int i = 0; i < this->cmd_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cmd(i).data(), this->cmd(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(i), output);
  }
  
  // repeated .dcmd_api.SubTaskProcess subtask_process = 2;
  for (int i = 0; i < this->subtask_process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->subtask_process(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentMasterNoticeReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string cmd = 1;
  for (int i = 0; i < this->cmd_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd(i).data(), this->cmd(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->cmd(i), target);
  }
  
  // repeated .dcmd_api.SubTaskProcess subtask_process = 2;
  for (int i = 0; i < this->subtask_process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->subtask_process(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentMasterNoticeReply::ByteSize() const {
  int total_size = 0;
  
  // repeated string cmd = 1;
  total_size += 1 * this->cmd_size();
  for (int i = 0; i < this->cmd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cmd(i));
  }
  
  // repeated .dcmd_api.SubTaskProcess subtask_process = 2;
  total_size += 1 * this->subtask_process_size();
  for (int i = 0; i < this->subtask_process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subtask_process(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentMasterNoticeReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentMasterNoticeReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentMasterNoticeReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentMasterNoticeReply::MergeFrom(const AgentMasterNoticeReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  cmd_.MergeFrom(from.cmd_);
  subtask_process_.MergeFrom(from.subtask_process_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentMasterNoticeReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentMasterNoticeReply::CopyFrom(const AgentMasterNoticeReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentMasterNoticeReply::IsInitialized() const {
  
  for (int i = 0; i < subtask_process_size(); i++) {
    if (!this->subtask_process(i).IsInitialized()) return false;
  }
  return true;
}

void AgentMasterNoticeReply::Swap(AgentMasterNoticeReply* other) {
  if (other != this) {
    cmd_.Swap(&other->cmd_);
    subtask_process_.Swap(&other->subtask_process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentMasterNoticeReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentMasterNoticeReply_descriptor_;
  metadata.reflection = AgentMasterNoticeReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskCmd::kCmdFieldNumber;
const int AgentTaskCmd::kTaskCmdFieldNumber;
const int AgentTaskCmd::kCtrlFieldNumber;
const int AgentTaskCmd::kTaskIdFieldNumber;
const int AgentTaskCmd::kSubtaskIdFieldNumber;
const int AgentTaskCmd::kIpFieldNumber;
const int AgentTaskCmd::kSvrNameFieldNumber;
const int AgentTaskCmd::kSvrPoolFieldNumber;
const int AgentTaskCmd::kSvrVerFieldNumber;
const int AgentTaskCmd::kSvrRepoFieldNumber;
const int AgentTaskCmd::kSvrUserFieldNumber;
const int AgentTaskCmd::kSvrEnvVerFieldNumber;
const int AgentTaskCmd::kUpdateEnvFieldNumber;
const int AgentTaskCmd::kUpdateVerFieldNumber;
const int AgentTaskCmd::kOutputProcessFieldNumber;
const int AgentTaskCmd::kScriptFieldNumber;
const int AgentTaskCmd::kTaskArgFieldNumber;
#endif  // !_MSC_VER

AgentTaskCmd::AgentTaskCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentTaskCmd::InitAsDefaultInstance() {
}

AgentTaskCmd::AgentTaskCmd(const AgentTaskCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentTaskCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ctrl_ = false;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_repo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_env_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_env_ = false;
  update_ver_ = false;
  output_process_ = false;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskCmd::~AgentTaskCmd() {
  SharedDtor();
}

void AgentTaskCmd::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (task_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete task_cmd_;
  }
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_name_;
  }
  if (svr_pool_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_pool_;
  }
  if (svr_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_ver_;
  }
  if (svr_repo_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_repo_;
  }
  if (svr_user_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_user_;
  }
  if (svr_env_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_env_ver_;
  }
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskCmd_descriptor_;
}

const AgentTaskCmd& AgentTaskCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentTaskCmd* AgentTaskCmd::default_instance_ = NULL;

AgentTaskCmd* AgentTaskCmd::New() const {
  return new AgentTaskCmd;
}

void AgentTaskCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
    if (has_task_cmd()) {
      if (task_cmd_ != &::google::protobuf::internal::kEmptyString) {
        task_cmd_->clear();
      }
    }
    ctrl_ = false;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_svr_name()) {
      if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
        svr_name_->clear();
      }
    }
    if (has_svr_pool()) {
      if (svr_pool_ != &::google::protobuf::internal::kEmptyString) {
        svr_pool_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_svr_ver()) {
      if (svr_ver_ != &::google::protobuf::internal::kEmptyString) {
        svr_ver_->clear();
      }
    }
    if (has_svr_repo()) {
      if (svr_repo_ != &::google::protobuf::internal::kEmptyString) {
        svr_repo_->clear();
      }
    }
    if (has_svr_user()) {
      if (svr_user_ != &::google::protobuf::internal::kEmptyString) {
        svr_user_->clear();
      }
    }
    if (has_svr_env_ver()) {
      if (svr_env_ver_ != &::google::protobuf::internal::kEmptyString) {
        svr_env_ver_->clear();
      }
    }
    update_env_ = false;
    update_ver_ = false;
    output_process_ = false;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
  }
  task_arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_cmd;
        break;
      }
      
      // required string task_cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_cmd().data(), this->task_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ctrl;
        break;
      }
      
      // required bool ctrl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrl_)));
          set_has_ctrl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_id;
        break;
      }
      
      // optional string task_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_subtask_id;
        break;
      }
      
      // optional string subtask_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }
      
      // optional string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_svr_name;
        break;
      }
      
      // optional string svr_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_name().data(), this->svr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_svr_pool;
        break;
      }
      
      // optional string svr_pool = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_pool().data(), this->svr_pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_svr_ver;
        break;
      }
      
      // optional string svr_ver = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_ver().data(), this->svr_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_svr_repo;
        break;
      }
      
      // optional string svr_repo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_repo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_repo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_repo().data(), this->svr_repo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_svr_user;
        break;
      }
      
      // optional string svr_user = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_user().data(), this->svr_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_svr_env_ver;
        break;
      }
      
      // optional string svr_env_ver = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_env_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_env_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_env_ver().data(), this->svr_env_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_update_env;
        break;
      }
      
      // optional bool update_env = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_env:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_env_)));
          set_has_update_env();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_update_ver;
        break;
      }
      
      // optional bool update_ver = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_ver_)));
          set_has_update_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_output_process;
        break;
      }
      
      // optional bool output_process = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_output_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_process_)));
          set_has_output_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_script;
        break;
      }
      
      // optional string script = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_task_arg;
        break;
      }
      
      // repeated .dcmd_api.KeyValue task_arg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_arg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_task_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentTaskCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  // required string task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_cmd().data(), this->task_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_cmd(), output);
  }
  
  // required bool ctrl = 3;
  if (has_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ctrl(), output);
  }
  
  // optional string task_id = 4;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->task_id(), output);
  }
  
  // optional string subtask_id = 5;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->subtask_id(), output);
  }
  
  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }
  
  // optional string svr_name = 7;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->svr_name(), output);
  }
  
  // optional string svr_pool = 8;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_pool().data(), this->svr_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->svr_pool(), output);
  }
  
  // optional string svr_ver = 9;
  if (has_svr_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_ver().data(), this->svr_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->svr_ver(), output);
  }
  
  // optional string svr_repo = 10;
  if (has_svr_repo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_repo().data(), this->svr_repo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->svr_repo(), output);
  }
  
  // optional string svr_user = 11;
  if (has_svr_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_user().data(), this->svr_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->svr_user(), output);
  }
  
  // optional string svr_env_ver = 12;
  if (has_svr_env_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_env_ver().data(), this->svr_env_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->svr_env_ver(), output);
  }
  
  // optional bool update_env = 13;
  if (has_update_env()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->update_env(), output);
  }
  
  // optional bool update_ver = 14;
  if (has_update_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->update_ver(), output);
  }
  
  // optional bool output_process = 15;
  if (has_output_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->output_process(), output);
  }
  
  // optional string script = 16;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->script(), output);
  }
  
  // repeated .dcmd_api.KeyValue task_arg = 17;
  for (int i = 0; i < this->task_arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->task_arg(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentTaskCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  // required string task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_cmd().data(), this->task_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_cmd(), target);
  }
  
  // required bool ctrl = 3;
  if (has_ctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ctrl(), target);
  }
  
  // optional string task_id = 4;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->task_id(), target);
  }
  
  // optional string subtask_id = 5;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->subtask_id(), target);
  }
  
  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }
  
  // optional string svr_name = 7;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->svr_name(), target);
  }
  
  // optional string svr_pool = 8;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_pool().data(), this->svr_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->svr_pool(), target);
  }
  
  // optional string svr_ver = 9;
  if (has_svr_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_ver().data(), this->svr_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->svr_ver(), target);
  }
  
  // optional string svr_repo = 10;
  if (has_svr_repo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_repo().data(), this->svr_repo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->svr_repo(), target);
  }
  
  // optional string svr_user = 11;
  if (has_svr_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_user().data(), this->svr_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->svr_user(), target);
  }
  
  // optional string svr_env_ver = 12;
  if (has_svr_env_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_env_ver().data(), this->svr_env_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->svr_env_ver(), target);
  }
  
  // optional bool update_env = 13;
  if (has_update_env()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->update_env(), target);
  }
  
  // optional bool update_ver = 14;
  if (has_update_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->update_ver(), target);
  }
  
  // optional bool output_process = 15;
  if (has_output_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->output_process(), target);
  }
  
  // optional string script = 16;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->script(), target);
  }
  
  // repeated .dcmd_api.KeyValue task_arg = 17;
  for (int i = 0; i < this->task_arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->task_arg(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentTaskCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
    // required string task_cmd = 2;
    if (has_task_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_cmd());
    }
    
    // required bool ctrl = 3;
    if (has_ctrl()) {
      total_size += 1 + 1;
    }
    
    // optional string task_id = 4;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // optional string subtask_id = 5;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }
    
    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string svr_name = 7;
    if (has_svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_name());
    }
    
    // optional string svr_pool = 8;
    if (has_svr_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_pool());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string svr_ver = 9;
    if (has_svr_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_ver());
    }
    
    // optional string svr_repo = 10;
    if (has_svr_repo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_repo());
    }
    
    // optional string svr_user = 11;
    if (has_svr_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_user());
    }
    
    // optional string svr_env_ver = 12;
    if (has_svr_env_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_env_ver());
    }
    
    // optional bool update_env = 13;
    if (has_update_env()) {
      total_size += 1 + 1;
    }
    
    // optional bool update_ver = 14;
    if (has_update_ver()) {
      total_size += 1 + 1;
    }
    
    // optional bool output_process = 15;
    if (has_output_process()) {
      total_size += 1 + 1;
    }
    
    // optional string script = 16;
    if (has_script()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }
    
  }
  // repeated .dcmd_api.KeyValue task_arg = 17;
  total_size += 2 * this->task_arg_size();
  for (int i = 0; i < this->task_arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_arg(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskCmd::MergeFrom(const AgentTaskCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_arg_.MergeFrom(from.task_arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_task_cmd()) {
      set_task_cmd(from.task_cmd());
    }
    if (from.has_ctrl()) {
      set_ctrl(from.ctrl());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_svr_name()) {
      set_svr_name(from.svr_name());
    }
    if (from.has_svr_pool()) {
      set_svr_pool(from.svr_pool());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_svr_ver()) {
      set_svr_ver(from.svr_ver());
    }
    if (from.has_svr_repo()) {
      set_svr_repo(from.svr_repo());
    }
    if (from.has_svr_user()) {
      set_svr_user(from.svr_user());
    }
    if (from.has_svr_env_ver()) {
      set_svr_env_ver(from.svr_env_ver());
    }
    if (from.has_update_env()) {
      set_update_env(from.update_env());
    }
    if (from.has_update_ver()) {
      set_update_ver(from.update_ver());
    }
    if (from.has_output_process()) {
      set_output_process(from.output_process());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskCmd::CopyFrom(const AgentTaskCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < task_arg_size(); i++) {
    if (!this->task_arg(i).IsInitialized()) return false;
  }
  return true;
}

void AgentTaskCmd::Swap(AgentTaskCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(task_cmd_, other->task_cmd_);
    std::swap(ctrl_, other->ctrl_);
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(ip_, other->ip_);
    std::swap(svr_name_, other->svr_name_);
    std::swap(svr_pool_, other->svr_pool_);
    std::swap(svr_ver_, other->svr_ver_);
    std::swap(svr_repo_, other->svr_repo_);
    std::swap(svr_user_, other->svr_user_);
    std::swap(svr_env_ver_, other->svr_env_ver_);
    std::swap(update_env_, other->update_env_);
    std::swap(update_ver_, other->update_ver_);
    std::swap(output_process_, other->output_process_);
    std::swap(script_, other->script_);
    task_arg_.Swap(&other->task_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskCmd_descriptor_;
  metadata.reflection = AgentTaskCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskCmdReply::kCmdFieldNumber;
#endif  // !_MSC_VER

AgentTaskCmdReply::AgentTaskCmdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentTaskCmdReply::InitAsDefaultInstance() {
}

AgentTaskCmdReply::AgentTaskCmdReply(const AgentTaskCmdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentTaskCmdReply::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskCmdReply::~AgentTaskCmdReply() {
  SharedDtor();
}

void AgentTaskCmdReply::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskCmdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskCmdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskCmdReply_descriptor_;
}

const AgentTaskCmdReply& AgentTaskCmdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentTaskCmdReply* AgentTaskCmdReply::default_instance_ = NULL;

AgentTaskCmdReply* AgentTaskCmdReply::New() const {
  return new AgentTaskCmdReply;
}

void AgentTaskCmdReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskCmdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentTaskCmdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentTaskCmdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentTaskCmdReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskCmdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskCmdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskCmdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskCmdReply::MergeFrom(const AgentTaskCmdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskCmdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskCmdReply::CopyFrom(const AgentTaskCmdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskCmdReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AgentTaskCmdReply::Swap(AgentTaskCmdReply* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskCmdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskCmdReply_descriptor_;
  metadata.reflection = AgentTaskCmdReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentSubTaskProcess::kTaskIdFieldNumber;
const int AgentSubTaskProcess::kSubtaskIdFieldNumber;
const int AgentSubTaskProcess::kProcessFieldNumber;
#endif  // !_MSC_VER

AgentSubTaskProcess::AgentSubTaskProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentSubTaskProcess::InitAsDefaultInstance() {
}

AgentSubTaskProcess::AgentSubTaskProcess(const AgentSubTaskProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentSubTaskProcess::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentSubTaskProcess::~AgentSubTaskProcess() {
  SharedDtor();
}

void AgentSubTaskProcess::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (process_ != &::google::protobuf::internal::kEmptyString) {
    delete process_;
  }
  if (this != default_instance_) {
  }
}

void AgentSubTaskProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentSubTaskProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentSubTaskProcess_descriptor_;
}

const AgentSubTaskProcess& AgentSubTaskProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentSubTaskProcess* AgentSubTaskProcess::default_instance_ = NULL;

AgentSubTaskProcess* AgentSubTaskProcess::New() const {
  return new AgentSubTaskProcess;
}

void AgentSubTaskProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    if (has_process()) {
      if (process_ != &::google::protobuf::internal::kEmptyString) {
        process_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentSubTaskProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtask_id;
        break;
      }
      
      // required string subtask_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_process;
        break;
      }
      
      // required string process = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process().data(), this->process().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentSubTaskProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->task_id(), output);
  }
  
  // required string subtask_id = 2;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subtask_id(), output);
  }
  
  // required string process = 3;
  if (has_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process().data(), this->process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->process(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentSubTaskProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->task_id(), target);
  }
  
  // required string subtask_id = 2;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subtask_id(), target);
  }
  
  // required string process = 3;
  if (has_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process().data(), this->process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->process(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentSubTaskProcess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // required string subtask_id = 2;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }
    
    // required string process = 3;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentSubTaskProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentSubTaskProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentSubTaskProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentSubTaskProcess::MergeFrom(const AgentSubTaskProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentSubTaskProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentSubTaskProcess::CopyFrom(const AgentSubTaskProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentSubTaskProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AgentSubTaskProcess::Swap(AgentSubTaskProcess* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentSubTaskProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentSubTaskProcess_descriptor_;
  metadata.reflection = AgentSubTaskProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskResult::kCmdFieldNumber;
const int AgentTaskResult::kTaskIdFieldNumber;
const int AgentTaskResult::kSubtaskIdFieldNumber;
const int AgentTaskResult::kSuccessFieldNumber;
const int AgentTaskResult::kErrFieldNumber;
const int AgentTaskResult::kProcessFieldNumber;
#endif  // !_MSC_VER

AgentTaskResult::AgentTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentTaskResult::InitAsDefaultInstance() {
}

AgentTaskResult::AgentTaskResult(const AgentTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentTaskResult::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  success_ = false;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskResult::~AgentTaskResult() {
  SharedDtor();
}

void AgentTaskResult::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (process_ != &::google::protobuf::internal::kEmptyString) {
    delete process_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskResult_descriptor_;
}

const AgentTaskResult& AgentTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentTaskResult* AgentTaskResult::default_instance_ = NULL;

AgentTaskResult* AgentTaskResult::New() const {
  return new AgentTaskResult;
}

void AgentTaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    success_ = false;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    if (has_process()) {
      if (process_ != &::google::protobuf::internal::kEmptyString) {
        process_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }
      
      // required string task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subtask_id;
        break;
      }
      
      // required string subtask_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }
      
      // required bool success = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_err;
        break;
      }
      
      // optional string err = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_process;
        break;
      }
      
      // optional string process = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process().data(), this->process().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_id(), output);
  }
  
  // required string subtask_id = 3;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subtask_id(), output);
  }
  
  // required bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }
  
  // optional string err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->err(), output);
  }
  
  // optional string process = 6;
  if (has_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process().data(), this->process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->process(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }
  
  // required string subtask_id = 3;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subtask_id(), target);
  }
  
  // required bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }
  
  // optional string err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->err(), target);
  }
  
  // optional string process = 6;
  if (has_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process().data(), this->process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->process(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentTaskResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // required string subtask_id = 3;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }
    
    // required bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
    // optional string err = 5;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
    // optional string process = 6;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskResult::MergeFrom(const AgentTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskResult::CopyFrom(const AgentTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void AgentTaskResult::Swap(AgentTaskResult* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(success_, other->success_);
    std::swap(err_, other->err_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskResult_descriptor_;
  metadata.reflection = AgentTaskResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskResultReply::kCmdFieldNumber;
#endif  // !_MSC_VER

AgentTaskResultReply::AgentTaskResultReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentTaskResultReply::InitAsDefaultInstance() {
}

AgentTaskResultReply::AgentTaskResultReply(const AgentTaskResultReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentTaskResultReply::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskResultReply::~AgentTaskResultReply() {
  SharedDtor();
}

void AgentTaskResultReply::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskResultReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskResultReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskResultReply_descriptor_;
}

const AgentTaskResultReply& AgentTaskResultReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentTaskResultReply* AgentTaskResultReply::default_instance_ = NULL;

AgentTaskResultReply* AgentTaskResultReply::New() const {
  return new AgentTaskResultReply;
}

void AgentTaskResultReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskResultReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentTaskResultReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentTaskResultReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentTaskResultReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskResultReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskResultReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskResultReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskResultReply::MergeFrom(const AgentTaskResultReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskResultReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskResultReply::CopyFrom(const AgentTaskResultReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskResultReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AgentTaskResultReply::Swap(AgentTaskResultReply* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskResultReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskResultReply_descriptor_;
  metadata.reflection = AgentTaskResultReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentOprCmd::kOprIdFieldNumber;
const int AgentOprCmd::kNameFieldNumber;
const int AgentOprCmd::kPriorityFieldNumber;
const int AgentOprCmd::kRunUserFieldNumber;
const int AgentOprCmd::kTimeoutFieldNumber;
const int AgentOprCmd::kScriptFieldNumber;
const int AgentOprCmd::kArgsFieldNumber;
#endif  // !_MSC_VER

AgentOprCmd::AgentOprCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentOprCmd::InitAsDefaultInstance() {
}

AgentOprCmd::AgentOprCmd(const AgentOprCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentOprCmd::SharedCtor() {
  _cached_size_ = 0;
  opr_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  priority_ = 0;
  run_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeout_ = 0;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentOprCmd::~AgentOprCmd() {
  SharedDtor();
}

void AgentOprCmd::SharedDtor() {
  if (opr_id_ != &::google::protobuf::internal::kEmptyString) {
    delete opr_id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (run_user_ != &::google::protobuf::internal::kEmptyString) {
    delete run_user_;
  }
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (this != default_instance_) {
  }
}

void AgentOprCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentOprCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentOprCmd_descriptor_;
}

const AgentOprCmd& AgentOprCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentOprCmd* AgentOprCmd::default_instance_ = NULL;

AgentOprCmd* AgentOprCmd::New() const {
  return new AgentOprCmd;
}

void AgentOprCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_opr_id()) {
      if (opr_id_ != &::google::protobuf::internal::kEmptyString) {
        opr_id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    priority_ = 0;
    if (has_run_user()) {
      if (run_user_ != &::google::protobuf::internal::kEmptyString) {
        run_user_->clear();
      }
    }
    timeout_ = 0;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentOprCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string opr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opr_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opr_id().data(), this->opr_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }
      
      // required int32 priority = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_run_user;
        break;
      }
      
      // required string run_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_run_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_run_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->run_user().data(), this->run_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_script;
        break;
      }
      
      // required string script = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args;
        break;
      }
      
      // repeated .dcmd_api.KeyValue args = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentOprCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string opr_id = 1;
  if (has_opr_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_id().data(), this->opr_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->opr_id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required int32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }
  
  // required string run_user = 4;
  if (has_run_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->run_user().data(), this->run_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->run_user(), output);
  }
  
  // required int32 timeout = 5;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timeout(), output);
  }
  
  // required string script = 6;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->script(), output);
  }
  
  // repeated .dcmd_api.KeyValue args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentOprCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string opr_id = 1;
  if (has_opr_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_id().data(), this->opr_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->opr_id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required int32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }
  
  // required string run_user = 4;
  if (has_run_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->run_user().data(), this->run_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->run_user(), target);
  }
  
  // required int32 timeout = 5;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timeout(), target);
  }
  
  // required string script = 6;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->script(), target);
  }
  
  // repeated .dcmd_api.KeyValue args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentOprCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string opr_id = 1;
    if (has_opr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opr_id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }
    
    // required string run_user = 4;
    if (has_run_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->run_user());
    }
    
    // required int32 timeout = 5;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string script = 6;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }
    
  }
  // repeated .dcmd_api.KeyValue args = 7;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentOprCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentOprCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentOprCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentOprCmd::MergeFrom(const AgentOprCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opr_id()) {
      set_opr_id(from.opr_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_run_user()) {
      set_run_user(from.run_user());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentOprCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentOprCmd::CopyFrom(const AgentOprCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentOprCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void AgentOprCmd::Swap(AgentOprCmd* other) {
  if (other != this) {
    std::swap(opr_id_, other->opr_id_);
    std::swap(name_, other->name_);
    std::swap(priority_, other->priority_);
    std::swap(run_user_, other->run_user_);
    std::swap(timeout_, other->timeout_);
    std::swap(script_, other->script_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentOprCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentOprCmd_descriptor_;
  metadata.reflection = AgentOprCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentOprCmdReply::kStateFieldNumber;
const int AgentOprCmdReply::kResultFieldNumber;
const int AgentOprCmdReply::kErrFieldNumber;
const int AgentOprCmdReply::kIpFieldNumber;
#endif  // !_MSC_VER

AgentOprCmdReply::AgentOprCmdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentOprCmdReply::InitAsDefaultInstance() {
}

AgentOprCmdReply::AgentOprCmdReply(const AgentOprCmdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentOprCmdReply::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentOprCmdReply::~AgentOprCmdReply() {
  SharedDtor();
}

void AgentOprCmdReply::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AgentOprCmdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentOprCmdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentOprCmdReply_descriptor_;
}

const AgentOprCmdReply& AgentOprCmdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentOprCmdReply* AgentOprCmdReply::default_instance_ = NULL;

AgentOprCmdReply* AgentOprCmdReply::New() const {
  return new AgentOprCmdReply;
}

void AgentOprCmdReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentOprCmdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }
      
      // required string result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }
      
      // required string err = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentOprCmdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // required string result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->result(), output);
  }
  
  // required string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err(), output);
  }
  
  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentOprCmdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // required string result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }
  
  // required string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err(), target);
  }
  
  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentOprCmdReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // required string result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }
    
    // required string err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentOprCmdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentOprCmdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentOprCmdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentOprCmdReply::MergeFrom(const AgentOprCmdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentOprCmdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentOprCmdReply::CopyFrom(const AgentOprCmdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentOprCmdReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AgentOprCmdReply::Swap(AgentOprCmdReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(result_, other->result_);
    std::swap(err_, other->err_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentOprCmdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentOprCmdReply_descriptor_;
  metadata.reflection = AgentOprCmdReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskOutput::kSubtaskIdFieldNumber;
const int AgentTaskOutput::kOffsetFieldNumber;
const int AgentTaskOutput::kIpFieldNumber;
#endif  // !_MSC_VER

AgentTaskOutput::AgentTaskOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentTaskOutput::InitAsDefaultInstance() {
}

AgentTaskOutput::AgentTaskOutput(const AgentTaskOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentTaskOutput::SharedCtor() {
  _cached_size_ = 0;
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskOutput::~AgentTaskOutput() {
  SharedDtor();
}

void AgentTaskOutput::SharedDtor() {
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskOutput_descriptor_;
}

const AgentTaskOutput& AgentTaskOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentTaskOutput* AgentTaskOutput::default_instance_ = NULL;

AgentTaskOutput* AgentTaskOutput::New() const {
  return new AgentTaskOutput;
}

void AgentTaskOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    offset_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subtask_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }
      
      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }
      
      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentTaskOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string subtask_id = 1;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->subtask_id(), output);
  }
  
  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }
  
  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentTaskOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string subtask_id = 1;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subtask_id(), target);
  }
  
  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }
  
  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentTaskOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string subtask_id = 1;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }
    
    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskOutput::MergeFrom(const AgentTaskOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskOutput::CopyFrom(const AgentTaskOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AgentTaskOutput::Swap(AgentTaskOutput* other) {
  if (other != this) {
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(offset_, other->offset_);
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskOutput_descriptor_;
  metadata.reflection = AgentTaskOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentTaskOutputReply::kStateFieldNumber;
const int AgentTaskOutputReply::kResultFieldNumber;
const int AgentTaskOutputReply::kOffsetFieldNumber;
const int AgentTaskOutputReply::kErrFieldNumber;
#endif  // !_MSC_VER

AgentTaskOutputReply::AgentTaskOutputReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentTaskOutputReply::InitAsDefaultInstance() {
}

AgentTaskOutputReply::AgentTaskOutputReply(const AgentTaskOutputReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentTaskOutputReply::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentTaskOutputReply::~AgentTaskOutputReply() {
  SharedDtor();
}

void AgentTaskOutputReply::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void AgentTaskOutputReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentTaskOutputReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentTaskOutputReply_descriptor_;
}

const AgentTaskOutputReply& AgentTaskOutputReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentTaskOutputReply* AgentTaskOutputReply::default_instance_ = NULL;

AgentTaskOutputReply* AgentTaskOutputReply::New() const {
  return new AgentTaskOutputReply;
}

void AgentTaskOutputReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
    offset_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentTaskOutputReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }
      
      // required string result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }
      
      // required int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentTaskOutputReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // required string result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->result(), output);
  }
  
  // required int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentTaskOutputReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // required string result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }
  
  // required int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentTaskOutputReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // required string result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }
    
    // required int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentTaskOutputReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentTaskOutputReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentTaskOutputReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentTaskOutputReply::MergeFrom(const AgentTaskOutputReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentTaskOutputReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskOutputReply::CopyFrom(const AgentTaskOutputReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskOutputReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void AgentTaskOutputReply::Swap(AgentTaskOutputReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(result_, other->result_);
    std::swap(offset_, other->offset_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentTaskOutputReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentTaskOutputReply_descriptor_;
  metadata.reflection = AgentTaskOutputReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentRunningTask::kIpFieldNumber;
const int AgentRunningTask::kSvrNameFieldNumber;
#endif  // !_MSC_VER

AgentRunningTask::AgentRunningTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentRunningTask::InitAsDefaultInstance() {
}

AgentRunningTask::AgentRunningTask(const AgentRunningTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentRunningTask::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentRunningTask::~AgentRunningTask() {
  SharedDtor();
}

void AgentRunningTask::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_name_;
  }
  if (this != default_instance_) {
  }
}

void AgentRunningTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentRunningTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentRunningTask_descriptor_;
}

const AgentRunningTask& AgentRunningTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentRunningTask* AgentRunningTask::default_instance_ = NULL;

AgentRunningTask* AgentRunningTask::New() const {
  return new AgentRunningTask;
}

void AgentRunningTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_svr_name()) {
      if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
        svr_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentRunningTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_svr_name;
        break;
      }
      
      // optional string svr_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_name().data(), this->svr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentRunningTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional string svr_name = 2;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->svr_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentRunningTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional string svr_name = 2;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->svr_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentRunningTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string svr_name = 2;
    if (has_svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentRunningTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentRunningTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentRunningTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentRunningTask::MergeFrom(const AgentRunningTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_svr_name()) {
      set_svr_name(from.svr_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentRunningTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentRunningTask::CopyFrom(const AgentRunningTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentRunningTask::IsInitialized() const {
  
  return true;
}

void AgentRunningTask::Swap(AgentRunningTask* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(svr_name_, other->svr_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentRunningTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentRunningTask_descriptor_;
  metadata.reflection = AgentRunningTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentRunningTaskReply::kStateFieldNumber;
const int AgentRunningTaskReply::kResultFieldNumber;
const int AgentRunningTaskReply::kErrFieldNumber;
#endif  // !_MSC_VER

AgentRunningTaskReply::AgentRunningTaskReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentRunningTaskReply::InitAsDefaultInstance() {
}

AgentRunningTaskReply::AgentRunningTaskReply(const AgentRunningTaskReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentRunningTaskReply::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentRunningTaskReply::~AgentRunningTaskReply() {
  SharedDtor();
}

void AgentRunningTaskReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void AgentRunningTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentRunningTaskReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentRunningTaskReply_descriptor_;
}

const AgentRunningTaskReply& AgentRunningTaskReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentRunningTaskReply* AgentRunningTaskReply::default_instance_ = NULL;

AgentRunningTaskReply* AgentRunningTaskReply::New() const {
  return new AgentRunningTaskReply;
}

void AgentRunningTaskReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentRunningTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }
      
      // repeated .dcmd_api.SubTaskInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }
      
      // optional string err = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentRunningTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // repeated .dcmd_api.SubTaskInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }
  
  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentRunningTaskReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // repeated .dcmd_api.SubTaskInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }
  
  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentRunningTaskReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  // repeated .dcmd_api.SubTaskInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentRunningTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentRunningTaskReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentRunningTaskReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentRunningTaskReply::MergeFrom(const AgentRunningTaskReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentRunningTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentRunningTaskReply::CopyFrom(const AgentRunningTaskReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentRunningTaskReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void AgentRunningTaskReply::Swap(AgentRunningTaskReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentRunningTaskReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentRunningTaskReply_descriptor_;
  metadata.reflection = AgentRunningTaskReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentRunningOpr::kIpFieldNumber;
#endif  // !_MSC_VER

AgentRunningOpr::AgentRunningOpr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentRunningOpr::InitAsDefaultInstance() {
}

AgentRunningOpr::AgentRunningOpr(const AgentRunningOpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentRunningOpr::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentRunningOpr::~AgentRunningOpr() {
  SharedDtor();
}

void AgentRunningOpr::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void AgentRunningOpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentRunningOpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentRunningOpr_descriptor_;
}

const AgentRunningOpr& AgentRunningOpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentRunningOpr* AgentRunningOpr::default_instance_ = NULL;

AgentRunningOpr* AgentRunningOpr::New() const {
  return new AgentRunningOpr;
}

void AgentRunningOpr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentRunningOpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentRunningOpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentRunningOpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentRunningOpr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentRunningOpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentRunningOpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentRunningOpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentRunningOpr::MergeFrom(const AgentRunningOpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentRunningOpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentRunningOpr::CopyFrom(const AgentRunningOpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentRunningOpr::IsInitialized() const {
  
  return true;
}

void AgentRunningOpr::Swap(AgentRunningOpr* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentRunningOpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentRunningOpr_descriptor_;
  metadata.reflection = AgentRunningOpr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentRunningOprReply::kStateFieldNumber;
const int AgentRunningOprReply::kResultFieldNumber;
const int AgentRunningOprReply::kErrFieldNumber;
#endif  // !_MSC_VER

AgentRunningOprReply::AgentRunningOprReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentRunningOprReply::InitAsDefaultInstance() {
}

AgentRunningOprReply::AgentRunningOprReply(const AgentRunningOprReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentRunningOprReply::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentRunningOprReply::~AgentRunningOprReply() {
  SharedDtor();
}

void AgentRunningOprReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void AgentRunningOprReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentRunningOprReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentRunningOprReply_descriptor_;
}

const AgentRunningOprReply& AgentRunningOprReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

AgentRunningOprReply* AgentRunningOprReply::default_instance_ = NULL;

AgentRunningOprReply* AgentRunningOprReply::New() const {
  return new AgentRunningOprReply;
}

void AgentRunningOprReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentRunningOprReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dcmd_api.DcmdState state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }
      
      // repeated .dcmd_api.OprInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }
      
      // optional string err = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentRunningOprReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // repeated .dcmd_api.OprInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result(i), output);
  }
  
  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentRunningOprReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .dcmd_api.DcmdState state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // repeated .dcmd_api.OprInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result(i), target);
  }
  
  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentRunningOprReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .dcmd_api.DcmdState state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  // repeated .dcmd_api.OprInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentRunningOprReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentRunningOprReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentRunningOprReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentRunningOprReply::MergeFrom(const AgentRunningOprReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentRunningOprReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentRunningOprReply::CopyFrom(const AgentRunningOprReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentRunningOprReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void AgentRunningOprReply::Swap(AgentRunningOprReply* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentRunningOprReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentRunningOprReply_descriptor_;
  metadata.reflection = AgentRunningOprReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvalidMsg::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

InvalidMsg::InvalidMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvalidMsg::InitAsDefaultInstance() {
}

InvalidMsg::InvalidMsg(const InvalidMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvalidMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvalidMsg::~InvalidMsg() {
  SharedDtor();
}

void InvalidMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvalidMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvalidMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvalidMsg_descriptor_;
}

const InvalidMsg& InvalidMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

InvalidMsg* InvalidMsg::default_instance_ = NULL;

InvalidMsg* InvalidMsg::New() const {
  return new InvalidMsg;
}

void InvalidMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvalidMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
          set_has_msg_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvalidMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvalidMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvalidMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvalidMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvalidMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvalidMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvalidMsg::MergeFrom(const InvalidMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvalidMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvalidMsg::CopyFrom(const InvalidMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvalidMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void InvalidMsg::Swap(InvalidMsg* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvalidMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvalidMsg_descriptor_;
  metadata.reflection = InvalidMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskOutput::kClientMsgIdFieldNumber;
const int UiTaskOutput::kSubtaskIdFieldNumber;
const int UiTaskOutput::kIpFieldNumber;
const int UiTaskOutput::kOffsetFieldNumber;
const int UiTaskOutput::kUserFieldNumber;
const int UiTaskOutput::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiTaskOutput::UiTaskOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskOutput::InitAsDefaultInstance() {
}

UiTaskOutput::UiTaskOutput(const UiTaskOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskOutput::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskOutput::~UiTaskOutput() {
  SharedDtor();
}

void UiTaskOutput::SharedDtor() {
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskOutput_descriptor_;
}

const UiTaskOutput& UiTaskOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskOutput* UiTaskOutput::default_instance_ = NULL;

UiTaskOutput* UiTaskOutput::New() const {
  return new UiTaskOutput;
}

void UiTaskOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    offset_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtask_id;
        break;
      }
      
      // required string subtask_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }
      
      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }
      
      // required int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }
      
      // required string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required string subtask_id = 2;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subtask_id(), output);
  }
  
  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }
  
  // required int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }
  
  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }
  
  // required string passwd = 6;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required string subtask_id = 2;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subtask_id(), target);
  }
  
  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }
  
  // required int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }
  
  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }
  
  // required string passwd = 6;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required string subtask_id = 2;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }
    
    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // required string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 6;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskOutput::MergeFrom(const UiTaskOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskOutput::CopyFrom(const UiTaskOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void UiTaskOutput::Swap(UiTaskOutput* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(ip_, other->ip_);
    std::swap(offset_, other->offset_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskOutput_descriptor_;
  metadata.reflection = UiTaskOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskOutputReply::kClientMsgIdFieldNumber;
const int UiTaskOutputReply::kStateFieldNumber;
const int UiTaskOutputReply::kResultFieldNumber;
const int UiTaskOutputReply::kOffsetFieldNumber;
const int UiTaskOutputReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiTaskOutputReply::UiTaskOutputReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskOutputReply::InitAsDefaultInstance() {
}

UiTaskOutputReply::UiTaskOutputReply(const UiTaskOutputReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskOutputReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskOutputReply::~UiTaskOutputReply() {
  SharedDtor();
}

void UiTaskOutputReply::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskOutputReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskOutputReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskOutputReply_descriptor_;
}

const UiTaskOutputReply& UiTaskOutputReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskOutputReply* UiTaskOutputReply::default_instance_ = NULL;

UiTaskOutputReply* UiTaskOutputReply::New() const {
  return new UiTaskOutputReply;
}

void UiTaskOutputReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
    offset_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskOutputReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }
      
      // required string result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }
      
      // required int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_err;
        break;
      }
      
      // optional string err = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskOutputReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // required string result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result(), output);
  }
  
  // required int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }
  
  // optional string err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskOutputReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // required string result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result(), target);
  }
  
  // required int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }
  
  // optional string err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskOutputReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // required string result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }
    
    // required int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional string err = 5;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskOutputReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskOutputReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskOutputReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskOutputReply::MergeFrom(const UiTaskOutputReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskOutputReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskOutputReply::CopyFrom(const UiTaskOutputReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskOutputReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void UiTaskOutputReply::Swap(UiTaskOutputReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(result_, other->result_);
    std::swap(offset_, other->offset_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskOutputReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskOutputReply_descriptor_;
  metadata.reflection = UiTaskOutputReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentRunningTask::kClientMsgIdFieldNumber;
const int UiAgentRunningTask::kIpFieldNumber;
const int UiAgentRunningTask::kSvrNameFieldNumber;
const int UiAgentRunningTask::kUserFieldNumber;
const int UiAgentRunningTask::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiAgentRunningTask::UiAgentRunningTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentRunningTask::InitAsDefaultInstance() {
}

UiAgentRunningTask::UiAgentRunningTask(const UiAgentRunningTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentRunningTask::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentRunningTask::~UiAgentRunningTask() {
  SharedDtor();
}

void UiAgentRunningTask::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_name_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentRunningTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentRunningTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentRunningTask_descriptor_;
}

const UiAgentRunningTask& UiAgentRunningTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiAgentRunningTask* UiAgentRunningTask::default_instance_ = NULL;

UiAgentRunningTask* UiAgentRunningTask::New() const {
  return new UiAgentRunningTask;
}

void UiAgentRunningTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_svr_name()) {
      if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
        svr_name_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentRunningTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_svr_name;
        break;
      }
      
      // optional string svr_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_name().data(), this->svr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }
      
      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentRunningTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // optional string svr_name = 3;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->svr_name(), output);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentRunningTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // optional string svr_name = 3;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->svr_name(), target);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentRunningTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string svr_name = 3;
    if (has_svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_name());
    }
    
    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 5;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentRunningTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentRunningTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentRunningTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentRunningTask::MergeFrom(const UiAgentRunningTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_svr_name()) {
      set_svr_name(from.svr_name());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentRunningTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentRunningTask::CopyFrom(const UiAgentRunningTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentRunningTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  
  return true;
}

void UiAgentRunningTask::Swap(UiAgentRunningTask* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(ip_, other->ip_);
    std::swap(svr_name_, other->svr_name_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentRunningTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentRunningTask_descriptor_;
  metadata.reflection = UiAgentRunningTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentRunningTaskReply::kClientMsgIdFieldNumber;
const int UiAgentRunningTaskReply::kStateFieldNumber;
const int UiAgentRunningTaskReply::kResultFieldNumber;
const int UiAgentRunningTaskReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiAgentRunningTaskReply::UiAgentRunningTaskReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentRunningTaskReply::InitAsDefaultInstance() {
}

UiAgentRunningTaskReply::UiAgentRunningTaskReply(const UiAgentRunningTaskReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentRunningTaskReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentRunningTaskReply::~UiAgentRunningTaskReply() {
  SharedDtor();
}

void UiAgentRunningTaskReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentRunningTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentRunningTaskReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentRunningTaskReply_descriptor_;
}

const UiAgentRunningTaskReply& UiAgentRunningTaskReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiAgentRunningTaskReply* UiAgentRunningTaskReply::default_instance_ = NULL;

UiAgentRunningTaskReply* UiAgentRunningTaskReply::New() const {
  return new UiAgentRunningTaskReply;
}

void UiAgentRunningTaskReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentRunningTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }
      
      // repeated .dcmd_api.SubTaskInfo result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentRunningTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // repeated .dcmd_api.SubTaskInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(i), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentRunningTaskReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // repeated .dcmd_api.SubTaskInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(i), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentRunningTaskReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  // repeated .dcmd_api.SubTaskInfo result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentRunningTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentRunningTaskReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentRunningTaskReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentRunningTaskReply::MergeFrom(const UiAgentRunningTaskReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentRunningTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentRunningTaskReply::CopyFrom(const UiAgentRunningTaskReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentRunningTaskReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void UiAgentRunningTaskReply::Swap(UiAgentRunningTaskReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentRunningTaskReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentRunningTaskReply_descriptor_;
  metadata.reflection = UiAgentRunningTaskReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentRunningOpr::kClientMsgIdFieldNumber;
const int UiAgentRunningOpr::kIpFieldNumber;
const int UiAgentRunningOpr::kUserFieldNumber;
const int UiAgentRunningOpr::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiAgentRunningOpr::UiAgentRunningOpr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentRunningOpr::InitAsDefaultInstance() {
}

UiAgentRunningOpr::UiAgentRunningOpr(const UiAgentRunningOpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentRunningOpr::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentRunningOpr::~UiAgentRunningOpr() {
  SharedDtor();
}

void UiAgentRunningOpr::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentRunningOpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentRunningOpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentRunningOpr_descriptor_;
}

const UiAgentRunningOpr& UiAgentRunningOpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiAgentRunningOpr* UiAgentRunningOpr::default_instance_ = NULL;

UiAgentRunningOpr* UiAgentRunningOpr::New() const {
  return new UiAgentRunningOpr;
}

void UiAgentRunningOpr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentRunningOpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }
      
      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }
      
      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentRunningOpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentRunningOpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentRunningOpr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentRunningOpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentRunningOpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentRunningOpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentRunningOpr::MergeFrom(const UiAgentRunningOpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentRunningOpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentRunningOpr::CopyFrom(const UiAgentRunningOpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentRunningOpr::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void UiAgentRunningOpr::Swap(UiAgentRunningOpr* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(ip_, other->ip_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentRunningOpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentRunningOpr_descriptor_;
  metadata.reflection = UiAgentRunningOpr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentRunningOprReply::kClientMsgIdFieldNumber;
const int UiAgentRunningOprReply::kStateFieldNumber;
const int UiAgentRunningOprReply::kResultFieldNumber;
const int UiAgentRunningOprReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiAgentRunningOprReply::UiAgentRunningOprReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentRunningOprReply::InitAsDefaultInstance() {
}

UiAgentRunningOprReply::UiAgentRunningOprReply(const UiAgentRunningOprReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentRunningOprReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentRunningOprReply::~UiAgentRunningOprReply() {
  SharedDtor();
}

void UiAgentRunningOprReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentRunningOprReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentRunningOprReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentRunningOprReply_descriptor_;
}

const UiAgentRunningOprReply& UiAgentRunningOprReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiAgentRunningOprReply* UiAgentRunningOprReply::default_instance_ = NULL;

UiAgentRunningOprReply* UiAgentRunningOprReply::New() const {
  return new UiAgentRunningOprReply;
}

void UiAgentRunningOprReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentRunningOprReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }
      
      // repeated .dcmd_api.OprInfo result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentRunningOprReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // repeated .dcmd_api.OprInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(i), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentRunningOprReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // repeated .dcmd_api.OprInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(i), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentRunningOprReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  // repeated .dcmd_api.OprInfo result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentRunningOprReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentRunningOprReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentRunningOprReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentRunningOprReply::MergeFrom(const UiAgentRunningOprReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentRunningOprReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentRunningOprReply::CopyFrom(const UiAgentRunningOprReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentRunningOprReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void UiAgentRunningOprReply::Swap(UiAgentRunningOprReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentRunningOprReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentRunningOprReply_descriptor_;
  metadata.reflection = UiAgentRunningOprReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiExecOprCmd::kClientMsgIdFieldNumber;
const int UiExecOprCmd::kOprIdFieldNumber;
const int UiExecOprCmd::kArgsFieldNumber;
const int UiExecOprCmd::kUserFieldNumber;
const int UiExecOprCmd::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiExecOprCmd::UiExecOprCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiExecOprCmd::InitAsDefaultInstance() {
}

UiExecOprCmd::UiExecOprCmd(const UiExecOprCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiExecOprCmd::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  opr_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiExecOprCmd::~UiExecOprCmd() {
  SharedDtor();
}

void UiExecOprCmd::SharedDtor() {
  if (opr_id_ != &::google::protobuf::internal::kEmptyString) {
    delete opr_id_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiExecOprCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiExecOprCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiExecOprCmd_descriptor_;
}

const UiExecOprCmd& UiExecOprCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiExecOprCmd* UiExecOprCmd::default_instance_ = NULL;

UiExecOprCmd* UiExecOprCmd::New() const {
  return new UiExecOprCmd;
}

void UiExecOprCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_opr_id()) {
      if (opr_id_ != &::google::protobuf::internal::kEmptyString) {
        opr_id_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiExecOprCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opr_id;
        break;
      }
      
      // optional string opr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opr_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opr_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opr_id().data(), this->opr_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }
      
      // repeated .dcmd_api.KeyValue args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }
      
      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiExecOprCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // optional string opr_id = 2;
  if (has_opr_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_id().data(), this->opr_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->opr_id(), output);
  }
  
  // repeated .dcmd_api.KeyValue args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->args(i), output);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiExecOprCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // optional string opr_id = 2;
  if (has_opr_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_id().data(), this->opr_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opr_id(), target);
  }
  
  // repeated .dcmd_api.KeyValue args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->args(i), target);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiExecOprCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // optional string opr_id = 2;
    if (has_opr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opr_id());
    }
    
    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 5;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  // repeated .dcmd_api.KeyValue args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiExecOprCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiExecOprCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiExecOprCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiExecOprCmd::MergeFrom(const UiExecOprCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_opr_id()) {
      set_opr_id(from.opr_id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiExecOprCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiExecOprCmd::CopyFrom(const UiExecOprCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiExecOprCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void UiExecOprCmd::Swap(UiExecOprCmd* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(opr_id_, other->opr_id_);
    args_.Swap(&other->args_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiExecOprCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiExecOprCmd_descriptor_;
  metadata.reflection = UiExecOprCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiExecOprCmdReply::kClientMsgIdFieldNumber;
const int UiExecOprCmdReply::kStateFieldNumber;
const int UiExecOprCmdReply::kResultFieldNumber;
const int UiExecOprCmdReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiExecOprCmdReply::UiExecOprCmdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiExecOprCmdReply::InitAsDefaultInstance() {
}

UiExecOprCmdReply::UiExecOprCmdReply(const UiExecOprCmdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiExecOprCmdReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiExecOprCmdReply::~UiExecOprCmdReply() {
  SharedDtor();
}

void UiExecOprCmdReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiExecOprCmdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiExecOprCmdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiExecOprCmdReply_descriptor_;
}

const UiExecOprCmdReply& UiExecOprCmdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiExecOprCmdReply* UiExecOprCmdReply::default_instance_ = NULL;

UiExecOprCmdReply* UiExecOprCmdReply::New() const {
  return new UiExecOprCmdReply;
}

void UiExecOprCmdReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiExecOprCmdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }
      
      // repeated .dcmd_api.AgentOprCmdReply result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiExecOprCmdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // repeated .dcmd_api.AgentOprCmdReply result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(i), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiExecOprCmdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // repeated .dcmd_api.AgentOprCmdReply result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(i), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiExecOprCmdReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  // repeated .dcmd_api.AgentOprCmdReply result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiExecOprCmdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiExecOprCmdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiExecOprCmdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiExecOprCmdReply::MergeFrom(const UiExecOprCmdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiExecOprCmdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiExecOprCmdReply::CopyFrom(const UiExecOprCmdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiExecOprCmdReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void UiExecOprCmdReply::Swap(UiExecOprCmdReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiExecOprCmdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiExecOprCmdReply_descriptor_;
  metadata.reflection = UiExecOprCmdReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentInfo::kClientMsgIdFieldNumber;
const int UiAgentInfo::kIpsFieldNumber;
const int UiAgentInfo::kVersionFieldNumber;
const int UiAgentInfo::kUserFieldNumber;
const int UiAgentInfo::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiAgentInfo::UiAgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentInfo::InitAsDefaultInstance() {
}

UiAgentInfo::UiAgentInfo(const UiAgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentInfo::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  version_ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentInfo::~UiAgentInfo() {
  SharedDtor();
}

void UiAgentInfo::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentInfo_descriptor_;
}

const UiAgentInfo& UiAgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiAgentInfo* UiAgentInfo::default_instance_ = NULL;

UiAgentInfo* UiAgentInfo::New() const {
  return new UiAgentInfo;
}

void UiAgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    version_ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ips;
        break;
      }
      
      // repeated string ips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ips(0).data(), this->ips(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ips;
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }
      
      // required bool version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }
      
      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // repeated string ips = 2;
  for (int i = 0; i < this->ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ips(i).data(), this->ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ips(i), output);
  }
  
  // required bool version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->version(), output);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // repeated string ips = 2;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ips(i), target);
  }
  
  // required bool version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->version(), target);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required bool version = 3;
    if (has_version()) {
      total_size += 1 + 1;
    }
    
    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 5;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  // repeated string ips = 2;
  total_size += 1 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentInfo::MergeFrom(const UiAgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentInfo::CopyFrom(const UiAgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  
  return true;
}

void UiAgentInfo::Swap(UiAgentInfo* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    ips_.Swap(&other->ips_);
    std::swap(version_, other->version_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentInfo_descriptor_;
  metadata.reflection = UiAgentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentInfoReply::kClientMsgIdFieldNumber;
const int UiAgentInfoReply::kStateFieldNumber;
const int UiAgentInfoReply::kAgentinfoFieldNumber;
const int UiAgentInfoReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiAgentInfoReply::UiAgentInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentInfoReply::InitAsDefaultInstance() {
}

UiAgentInfoReply::UiAgentInfoReply(const UiAgentInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentInfoReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentInfoReply::~UiAgentInfoReply() {
  SharedDtor();
}

void UiAgentInfoReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentInfoReply_descriptor_;
}

const UiAgentInfoReply& UiAgentInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiAgentInfoReply* UiAgentInfoReply::default_instance_ = NULL;

UiAgentInfoReply* UiAgentInfoReply::New() const {
  return new UiAgentInfoReply;
}

void UiAgentInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  agentinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agentinfo;
        break;
      }
      
      // repeated .dcmd_api.AgentInfo agentinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agentinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agentinfo;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  for (int i = 0; i < this->agentinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->agentinfo(i), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  for (int i = 0; i < this->agentinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->agentinfo(i), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentInfoReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  total_size += 1 * this->agentinfo_size();
  for (int i = 0; i < this->agentinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agentinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentInfoReply::MergeFrom(const UiAgentInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  agentinfo_.MergeFrom(from.agentinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentInfoReply::CopyFrom(const UiAgentInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < agentinfo_size(); i++) {
    if (!this->agentinfo(i).IsInitialized()) return false;
  }
  return true;
}

void UiAgentInfoReply::Swap(UiAgentInfoReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    agentinfo_.Swap(&other->agentinfo_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentInfoReply_descriptor_;
  metadata.reflection = UiAgentInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiInvalidAgentInfo::kClientMsgIdFieldNumber;
const int UiInvalidAgentInfo::kUserFieldNumber;
const int UiInvalidAgentInfo::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiInvalidAgentInfo::UiInvalidAgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiInvalidAgentInfo::InitAsDefaultInstance() {
}

UiInvalidAgentInfo::UiInvalidAgentInfo(const UiInvalidAgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiInvalidAgentInfo::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiInvalidAgentInfo::~UiInvalidAgentInfo() {
  SharedDtor();
}

void UiInvalidAgentInfo::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiInvalidAgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiInvalidAgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiInvalidAgentInfo_descriptor_;
}

const UiInvalidAgentInfo& UiInvalidAgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiInvalidAgentInfo* UiInvalidAgentInfo::default_instance_ = NULL;

UiInvalidAgentInfo* UiInvalidAgentInfo::New() const {
  return new UiInvalidAgentInfo;
}

void UiInvalidAgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiInvalidAgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }
      
      // required string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiInvalidAgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }
  
  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiInvalidAgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }
  
  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiInvalidAgentInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiInvalidAgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiInvalidAgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiInvalidAgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiInvalidAgentInfo::MergeFrom(const UiInvalidAgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiInvalidAgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiInvalidAgentInfo::CopyFrom(const UiInvalidAgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiInvalidAgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void UiInvalidAgentInfo::Swap(UiInvalidAgentInfo* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiInvalidAgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiInvalidAgentInfo_descriptor_;
  metadata.reflection = UiInvalidAgentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiInvalidAgentInfoReply::kClientMsgIdFieldNumber;
const int UiInvalidAgentInfoReply::kStateFieldNumber;
const int UiInvalidAgentInfoReply::kAgentinfoFieldNumber;
const int UiInvalidAgentInfoReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiInvalidAgentInfoReply::UiInvalidAgentInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiInvalidAgentInfoReply::InitAsDefaultInstance() {
  agentinfo_ = const_cast< ::dcmd_api::AgentInfo*>(&::dcmd_api::AgentInfo::default_instance());
}

UiInvalidAgentInfoReply::UiInvalidAgentInfoReply(const UiInvalidAgentInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiInvalidAgentInfoReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  agentinfo_ = NULL;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiInvalidAgentInfoReply::~UiInvalidAgentInfoReply() {
  SharedDtor();
}

void UiInvalidAgentInfoReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
    delete agentinfo_;
  }
}

void UiInvalidAgentInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiInvalidAgentInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiInvalidAgentInfoReply_descriptor_;
}

const UiInvalidAgentInfoReply& UiInvalidAgentInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiInvalidAgentInfoReply* UiInvalidAgentInfoReply::default_instance_ = NULL;

UiInvalidAgentInfoReply* UiInvalidAgentInfoReply::New() const {
  return new UiInvalidAgentInfoReply;
}

void UiInvalidAgentInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_agentinfo()) {
      if (agentinfo_ != NULL) agentinfo_->::dcmd_api::AgentInfo::Clear();
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiInvalidAgentInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agentinfo;
        break;
      }
      
      // required .dcmd_api.AgentInfo agentinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_agentinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiInvalidAgentInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // required .dcmd_api.AgentInfo agentinfo = 3;
  if (has_agentinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->agentinfo(), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiInvalidAgentInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // required .dcmd_api.AgentInfo agentinfo = 3;
  if (has_agentinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->agentinfo(), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiInvalidAgentInfoReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // required .dcmd_api.AgentInfo agentinfo = 3;
    if (has_agentinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agentinfo());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiInvalidAgentInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiInvalidAgentInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiInvalidAgentInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiInvalidAgentInfoReply::MergeFrom(const UiInvalidAgentInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_agentinfo()) {
      mutable_agentinfo()->::dcmd_api::AgentInfo::MergeFrom(from.agentinfo());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiInvalidAgentInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiInvalidAgentInfoReply::CopyFrom(const UiInvalidAgentInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiInvalidAgentInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_agentinfo()) {
    if (!this->agentinfo().IsInitialized()) return false;
  }
  return true;
}

void UiInvalidAgentInfoReply::Swap(UiInvalidAgentInfoReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(agentinfo_, other->agentinfo_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiInvalidAgentInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiInvalidAgentInfoReply_descriptor_;
  metadata.reflection = UiInvalidAgentInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskScriptInfo::kClientMsgIdFieldNumber;
const int UiTaskScriptInfo::kTaskCmdFieldNumber;
const int UiTaskScriptInfo::kUserFieldNumber;
const int UiTaskScriptInfo::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiTaskScriptInfo::UiTaskScriptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskScriptInfo::InitAsDefaultInstance() {
}

UiTaskScriptInfo::UiTaskScriptInfo(const UiTaskScriptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskScriptInfo::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskScriptInfo::~UiTaskScriptInfo() {
  SharedDtor();
}

void UiTaskScriptInfo::SharedDtor() {
  if (task_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete task_cmd_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskScriptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskScriptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskScriptInfo_descriptor_;
}

const UiTaskScriptInfo& UiTaskScriptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskScriptInfo* UiTaskScriptInfo::default_instance_ = NULL;

UiTaskScriptInfo* UiTaskScriptInfo::New() const {
  return new UiTaskScriptInfo;
}

void UiTaskScriptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_task_cmd()) {
      if (task_cmd_ != &::google::protobuf::internal::kEmptyString) {
        task_cmd_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskScriptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_cmd;
        break;
      }
      
      // required string task_cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_cmd().data(), this->task_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }
      
      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskScriptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required string task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_cmd().data(), this->task_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_cmd(), output);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskScriptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required string task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_cmd().data(), this->task_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_cmd(), target);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskScriptInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required string task_cmd = 2;
    if (has_task_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_cmd());
    }
    
    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskScriptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskScriptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskScriptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskScriptInfo::MergeFrom(const UiTaskScriptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_task_cmd()) {
      set_task_cmd(from.task_cmd());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskScriptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskScriptInfo::CopyFrom(const UiTaskScriptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskScriptInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void UiTaskScriptInfo::Swap(UiTaskScriptInfo* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(task_cmd_, other->task_cmd_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskScriptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskScriptInfo_descriptor_;
  metadata.reflection = UiTaskScriptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskScriptInfoReply::kClientMsgIdFieldNumber;
const int UiTaskScriptInfoReply::kStateFieldNumber;
const int UiTaskScriptInfoReply::kScriptFieldNumber;
const int UiTaskScriptInfoReply::kErrFieldNumber;
const int UiTaskScriptInfoReply::kMd5FieldNumber;
#endif  // !_MSC_VER

UiTaskScriptInfoReply::UiTaskScriptInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskScriptInfoReply::InitAsDefaultInstance() {
}

UiTaskScriptInfoReply::UiTaskScriptInfoReply(const UiTaskScriptInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskScriptInfoReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskScriptInfoReply::~UiTaskScriptInfoReply() {
  SharedDtor();
}

void UiTaskScriptInfoReply::SharedDtor() {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskScriptInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskScriptInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskScriptInfoReply_descriptor_;
}

const UiTaskScriptInfoReply& UiTaskScriptInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskScriptInfoReply* UiTaskScriptInfoReply::default_instance_ = NULL;

UiTaskScriptInfoReply* UiTaskScriptInfoReply::New() const {
  return new UiTaskScriptInfoReply;
}

void UiTaskScriptInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskScriptInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_script;
        break;
      }
      
      // optional string script = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_md5;
        break;
      }
      
      // optional string md5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskScriptInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional string script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->script(), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->md5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskScriptInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional string script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->script(), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->md5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskScriptInfoReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string script = 3;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
    // optional string md5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskScriptInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskScriptInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskScriptInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskScriptInfoReply::MergeFrom(const UiTaskScriptInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskScriptInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskScriptInfoReply::CopyFrom(const UiTaskScriptInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskScriptInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UiTaskScriptInfoReply::Swap(UiTaskScriptInfoReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(script_, other->script_);
    std::swap(err_, other->err_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskScriptInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskScriptInfoReply_descriptor_;
  metadata.reflection = UiTaskScriptInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiOprScriptInfo::kClientMsgIdFieldNumber;
const int UiOprScriptInfo::kOprFileFieldNumber;
const int UiOprScriptInfo::kUserFieldNumber;
const int UiOprScriptInfo::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiOprScriptInfo::UiOprScriptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiOprScriptInfo::InitAsDefaultInstance() {
}

UiOprScriptInfo::UiOprScriptInfo(const UiOprScriptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiOprScriptInfo::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  opr_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiOprScriptInfo::~UiOprScriptInfo() {
  SharedDtor();
}

void UiOprScriptInfo::SharedDtor() {
  if (opr_file_ != &::google::protobuf::internal::kEmptyString) {
    delete opr_file_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiOprScriptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiOprScriptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiOprScriptInfo_descriptor_;
}

const UiOprScriptInfo& UiOprScriptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiOprScriptInfo* UiOprScriptInfo::default_instance_ = NULL;

UiOprScriptInfo* UiOprScriptInfo::New() const {
  return new UiOprScriptInfo;
}

void UiOprScriptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_opr_file()) {
      if (opr_file_ != &::google::protobuf::internal::kEmptyString) {
        opr_file_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiOprScriptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opr_file;
        break;
      }
      
      // required string opr_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opr_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opr_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opr_file().data(), this->opr_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }
      
      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiOprScriptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required string opr_file = 2;
  if (has_opr_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_file().data(), this->opr_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->opr_file(), output);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiOprScriptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required string opr_file = 2;
  if (has_opr_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_file().data(), this->opr_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opr_file(), target);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiOprScriptInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required string opr_file = 2;
    if (has_opr_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opr_file());
    }
    
    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiOprScriptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiOprScriptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiOprScriptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiOprScriptInfo::MergeFrom(const UiOprScriptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_opr_file()) {
      set_opr_file(from.opr_file());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiOprScriptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiOprScriptInfo::CopyFrom(const UiOprScriptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiOprScriptInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void UiOprScriptInfo::Swap(UiOprScriptInfo* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(opr_file_, other->opr_file_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiOprScriptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiOprScriptInfo_descriptor_;
  metadata.reflection = UiOprScriptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiOprScriptInfoReply::kClientMsgIdFieldNumber;
const int UiOprScriptInfoReply::kStateFieldNumber;
const int UiOprScriptInfoReply::kScriptFieldNumber;
const int UiOprScriptInfoReply::kErrFieldNumber;
const int UiOprScriptInfoReply::kMd5FieldNumber;
#endif  // !_MSC_VER

UiOprScriptInfoReply::UiOprScriptInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiOprScriptInfoReply::InitAsDefaultInstance() {
}

UiOprScriptInfoReply::UiOprScriptInfoReply(const UiOprScriptInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiOprScriptInfoReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiOprScriptInfoReply::~UiOprScriptInfoReply() {
  SharedDtor();
}

void UiOprScriptInfoReply::SharedDtor() {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void UiOprScriptInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiOprScriptInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiOprScriptInfoReply_descriptor_;
}

const UiOprScriptInfoReply& UiOprScriptInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiOprScriptInfoReply* UiOprScriptInfoReply::default_instance_ = NULL;

UiOprScriptInfoReply* UiOprScriptInfoReply::New() const {
  return new UiOprScriptInfoReply;
}

void UiOprScriptInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiOprScriptInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_script;
        break;
      }
      
      // optional string script = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_md5;
        break;
      }
      
      // optional string md5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiOprScriptInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional string script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->script(), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->md5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiOprScriptInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional string script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->script(), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->md5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiOprScriptInfoReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string script = 3;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
    // optional string md5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiOprScriptInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiOprScriptInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiOprScriptInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiOprScriptInfoReply::MergeFrom(const UiOprScriptInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiOprScriptInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiOprScriptInfoReply::CopyFrom(const UiOprScriptInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiOprScriptInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UiOprScriptInfoReply::Swap(UiOprScriptInfoReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(script_, other->script_);
    std::swap(err_, other->err_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiOprScriptInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiOprScriptInfoReply_descriptor_;
  metadata.reflection = UiOprScriptInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentTaskProcess::kClientMsgIdFieldNumber;
const int UiAgentTaskProcess::kSubtaskIdFieldNumber;
const int UiAgentTaskProcess::kUserFieldNumber;
const int UiAgentTaskProcess::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiAgentTaskProcess::UiAgentTaskProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentTaskProcess::InitAsDefaultInstance() {
}

UiAgentTaskProcess::UiAgentTaskProcess(const UiAgentTaskProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentTaskProcess::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentTaskProcess::~UiAgentTaskProcess() {
  SharedDtor();
}

void UiAgentTaskProcess::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentTaskProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentTaskProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentTaskProcess_descriptor_;
}

const UiAgentTaskProcess& UiAgentTaskProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiAgentTaskProcess* UiAgentTaskProcess::default_instance_ = NULL;

UiAgentTaskProcess* UiAgentTaskProcess::New() const {
  return new UiAgentTaskProcess;
}

void UiAgentTaskProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  subtask_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentTaskProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtask_id;
        break;
      }
      
      // repeated string subtask_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id(0).data(), this->subtask_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtask_id;
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }
      
      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentTaskProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // repeated string subtask_id = 2;
  for (int i = 0; i < this->subtask_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->subtask_id(i).data(), this->subtask_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subtask_id(i), output);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentTaskProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // repeated string subtask_id = 2;
  for (int i = 0; i < this->subtask_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id(i).data(), this->subtask_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->subtask_id(i), target);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentTaskProcess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  // repeated string subtask_id = 2;
  total_size += 1 * this->subtask_id_size();
  for (int i = 0; i < this->subtask_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subtask_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentTaskProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentTaskProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentTaskProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentTaskProcess::MergeFrom(const UiAgentTaskProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtask_id_.MergeFrom(from.subtask_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentTaskProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentTaskProcess::CopyFrom(const UiAgentTaskProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentTaskProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;
  
  return true;
}

void UiAgentTaskProcess::Swap(UiAgentTaskProcess* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    subtask_id_.Swap(&other->subtask_id_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentTaskProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentTaskProcess_descriptor_;
  metadata.reflection = UiAgentTaskProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentTaskProcessReply::kClientMsgIdFieldNumber;
const int UiAgentTaskProcessReply::kStateFieldNumber;
const int UiAgentTaskProcessReply::kProcessFieldNumber;
const int UiAgentTaskProcessReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiAgentTaskProcessReply::UiAgentTaskProcessReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentTaskProcessReply::InitAsDefaultInstance() {
}

UiAgentTaskProcessReply::UiAgentTaskProcessReply(const UiAgentTaskProcessReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentTaskProcessReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentTaskProcessReply::~UiAgentTaskProcessReply() {
  SharedDtor();
}

void UiAgentTaskProcessReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentTaskProcessReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentTaskProcessReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentTaskProcessReply_descriptor_;
}

const UiAgentTaskProcessReply& UiAgentTaskProcessReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiAgentTaskProcessReply* UiAgentTaskProcessReply::default_instance_ = NULL;

UiAgentTaskProcessReply* UiAgentTaskProcessReply::New() const {
  return new UiAgentTaskProcessReply;
}

void UiAgentTaskProcessReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentTaskProcessReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_process;
        break;
      }
      
      // repeated .dcmd_api.SubTaskProcess process = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_process;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentTaskProcessReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // repeated .dcmd_api.SubTaskProcess process = 3;
  for (int i = 0; i < this->process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->process(i), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentTaskProcessReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // repeated .dcmd_api.SubTaskProcess process = 3;
  for (int i = 0; i < this->process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->process(i), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentTaskProcessReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  // repeated .dcmd_api.SubTaskProcess process = 3;
  total_size += 1 * this->process_size();
  for (int i = 0; i < this->process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->process(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentTaskProcessReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentTaskProcessReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentTaskProcessReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentTaskProcessReply::MergeFrom(const UiAgentTaskProcessReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  process_.MergeFrom(from.process_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentTaskProcessReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentTaskProcessReply::CopyFrom(const UiAgentTaskProcessReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentTaskProcessReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < process_size(); i++) {
    if (!this->process(i).IsInitialized()) return false;
  }
  return true;
}

void UiAgentTaskProcessReply::Swap(UiAgentTaskProcessReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    process_.Swap(&other->process_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentTaskProcessReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentTaskProcessReply_descriptor_;
  metadata.reflection = UiAgentTaskProcessReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskCmd::kClientMsgIdFieldNumber;
const int UiTaskCmd::kTaskIdFieldNumber;
const int UiTaskCmd::kSubtaskIdFieldNumber;
const int UiTaskCmd::kIpFieldNumber;
const int UiTaskCmd::kSvrPoolFieldNumber;
const int UiTaskCmd::kCmdTypeFieldNumber;
const int UiTaskCmd::kUserFieldNumber;
const int UiTaskCmd::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiTaskCmd::UiTaskCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskCmd::InitAsDefaultInstance() {
}

UiTaskCmd::UiTaskCmd(const UiTaskCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskCmd::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_type_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskCmd::~UiTaskCmd() {
  SharedDtor();
}

void UiTaskCmd::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (svr_pool_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_pool_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskCmd_descriptor_;
}

const UiTaskCmd& UiTaskCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskCmd* UiTaskCmd::default_instance_ = NULL;

UiTaskCmd* UiTaskCmd::New() const {
  return new UiTaskCmd;
}

void UiTaskCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_svr_pool()) {
      if (svr_pool_ != &::google::protobuf::internal::kEmptyString) {
        svr_pool_->clear();
      }
    }
    cmd_type_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }
      
      // required string task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subtask_id;
        break;
      }
      
      // optional string subtask_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }
      
      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_svr_pool;
        break;
      }
      
      // optional string svr_pool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_pool().data(), this->svr_pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cmd_type;
        break;
      }
      
      // required .dcmd_api.CmdType cmd_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< dcmd_api::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user;
        break;
      }
      
      // required string user = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_id(), output);
  }
  
  // optional string subtask_id = 3;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subtask_id(), output);
  }
  
  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }
  
  // optional string svr_pool = 5;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_pool().data(), this->svr_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->svr_pool(), output);
  }
  
  // required .dcmd_api.CmdType cmd_type = 6;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cmd_type(), output);
  }
  
  // required string user = 7;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->user(), output);
  }
  
  // required string passwd = 8;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }
  
  // optional string subtask_id = 3;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subtask_id(), target);
  }
  
  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }
  
  // optional string svr_pool = 5;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_pool().data(), this->svr_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->svr_pool(), target);
  }
  
  // required .dcmd_api.CmdType cmd_type = 6;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cmd_type(), target);
  }
  
  // required string user = 7;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->user(), target);
  }
  
  // required string passwd = 8;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // optional string subtask_id = 3;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }
    
    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string svr_pool = 5;
    if (has_svr_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_pool());
    }
    
    // required .dcmd_api.CmdType cmd_type = 6;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }
    
    // required string user = 7;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 8;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskCmd::MergeFrom(const UiTaskCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_svr_pool()) {
      set_svr_pool(from.svr_pool());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskCmd::CopyFrom(const UiTaskCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000e3) != 0x000000e3) return false;
  
  return true;
}

void UiTaskCmd::Swap(UiTaskCmd* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(ip_, other->ip_);
    std::swap(svr_pool_, other->svr_pool_);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskCmd_descriptor_;
  metadata.reflection = UiTaskCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskCmdReply::kClientMsgIdFieldNumber;
const int UiTaskCmdReply::kStateFieldNumber;
const int UiTaskCmdReply::kCmdIdFieldNumber;
const int UiTaskCmdReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiTaskCmdReply::UiTaskCmdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskCmdReply::InitAsDefaultInstance() {
}

UiTaskCmdReply::UiTaskCmdReply(const UiTaskCmdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskCmdReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  cmd_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskCmdReply::~UiTaskCmdReply() {
  SharedDtor();
}

void UiTaskCmdReply::SharedDtor() {
  if (cmd_id_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_id_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskCmdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskCmdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskCmdReply_descriptor_;
}

const UiTaskCmdReply& UiTaskCmdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskCmdReply* UiTaskCmdReply::default_instance_ = NULL;

UiTaskCmdReply* UiTaskCmdReply::New() const {
  return new UiTaskCmdReply;
}

void UiTaskCmdReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_cmd_id()) {
      if (cmd_id_ != &::google::protobuf::internal::kEmptyString) {
        cmd_id_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskCmdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cmd_id;
        break;
      }
      
      // optional string cmd_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd_id().data(), this->cmd_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }
      
      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskCmdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional string cmd_id = 3;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd_id().data(), this->cmd_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cmd_id(), output);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskCmdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional string cmd_id = 3;
  if (has_cmd_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd_id().data(), this->cmd_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cmd_id(), target);
  }
  
  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskCmdReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string cmd_id = 3;
    if (has_cmd_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd_id());
    }
    
    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskCmdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskCmdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskCmdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskCmdReply::MergeFrom(const UiTaskCmdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cmd_id()) {
      set_cmd_id(from.cmd_id());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskCmdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskCmdReply::CopyFrom(const UiTaskCmdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskCmdReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UiTaskCmdReply::Swap(UiTaskCmdReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(cmd_id_, other->cmd_id_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskCmdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskCmdReply_descriptor_;
  metadata.reflection = UiTaskCmdReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskWatch::kClientMsgIdFieldNumber;
const int UiTaskWatch::kTaskIdFieldNumber;
const int UiTaskWatch::kLastStateFieldNumber;
const int UiTaskWatch::kUserFieldNumber;
const int UiTaskWatch::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiTaskWatch::UiTaskWatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskWatch::InitAsDefaultInstance() {
}

UiTaskWatch::UiTaskWatch(const UiTaskWatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskWatch::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_state_ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskWatch::~UiTaskWatch() {
  SharedDtor();
}

void UiTaskWatch::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskWatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskWatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskWatch_descriptor_;
}

const UiTaskWatch& UiTaskWatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskWatch* UiTaskWatch::default_instance_ = NULL;

UiTaskWatch* UiTaskWatch::New() const {
  return new UiTaskWatch;
}

void UiTaskWatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    last_state_ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskWatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }
      
      // required string task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_state;
        break;
      }
      
      // required bool last_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_state_)));
          set_has_last_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }
      
      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskWatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_id(), output);
  }
  
  // required bool last_state = 3;
  if (has_last_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->last_state(), output);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskWatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }
  
  // required bool last_state = 3;
  if (has_last_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->last_state(), target);
  }
  
  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }
  
  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskWatch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // required bool last_state = 3;
    if (has_last_state()) {
      total_size += 1 + 1;
    }
    
    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 5;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskWatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskWatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskWatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskWatch::MergeFrom(const UiTaskWatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_last_state()) {
      set_last_state(from.last_state());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskWatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskWatch::CopyFrom(const UiTaskWatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskWatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void UiTaskWatch::Swap(UiTaskWatch* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(last_state_, other->last_state_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskWatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskWatch_descriptor_;
  metadata.reflection = UiTaskWatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskWatchReply::kClientMsgIdFieldNumber;
const int UiTaskWatchReply::kWatchStateFieldNumber;
const int UiTaskWatchReply::kErrFieldNumber;
const int UiTaskWatchReply::kTaskInfoFieldNumber;
const int UiTaskWatchReply::kChildTasksFieldNumber;
#endif  // !_MSC_VER

UiTaskWatchReply::UiTaskWatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskWatchReply::InitAsDefaultInstance() {
  task_info_ = const_cast< ::dcmd_api::TaskInfo*>(&::dcmd_api::TaskInfo::default_instance());
}

UiTaskWatchReply::UiTaskWatchReply(const UiTaskWatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskWatchReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  watch_state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskWatchReply::~UiTaskWatchReply() {
  SharedDtor();
}

void UiTaskWatchReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
    delete task_info_;
  }
}

void UiTaskWatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskWatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskWatchReply_descriptor_;
}

const UiTaskWatchReply& UiTaskWatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskWatchReply* UiTaskWatchReply::default_instance_ = NULL;

UiTaskWatchReply* UiTaskWatchReply::New() const {
  return new UiTaskWatchReply;
}

void UiTaskWatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    watch_state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    if (has_task_info()) {
      if (task_info_ != NULL) task_info_->::dcmd_api::TaskInfo::Clear();
    }
  }
  child_tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskWatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_watch_state;
        break;
      }
      
      // required .dcmd_api.DcmdState watch_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watch_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_watch_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }
      
      // optional string err = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_info;
        break;
      }
      
      // required .dcmd_api.TaskInfo task_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child_tasks;
        break;
      }
      
      // repeated .dcmd_api.TaskInfo child_tasks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_child_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_child_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskWatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState watch_state = 2;
  if (has_watch_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->watch_state(), output);
  }
  
  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err(), output);
  }
  
  // required .dcmd_api.TaskInfo task_info = 4;
  if (has_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->task_info(), output);
  }
  
  // repeated .dcmd_api.TaskInfo child_tasks = 5;
  for (int i = 0; i < this->child_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->child_tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskWatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState watch_state = 2;
  if (has_watch_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->watch_state(), target);
  }
  
  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err(), target);
  }
  
  // required .dcmd_api.TaskInfo task_info = 4;
  if (has_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->task_info(), target);
  }
  
  // repeated .dcmd_api.TaskInfo child_tasks = 5;
  for (int i = 0; i < this->child_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->child_tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskWatchReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState watch_state = 2;
    if (has_watch_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->watch_state());
    }
    
    // optional string err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
    // required .dcmd_api.TaskInfo task_info = 4;
    if (has_task_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_info());
    }
    
  }
  // repeated .dcmd_api.TaskInfo child_tasks = 5;
  total_size += 1 * this->child_tasks_size();
  for (int i = 0; i < this->child_tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child_tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskWatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskWatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskWatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskWatchReply::MergeFrom(const UiTaskWatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  child_tasks_.MergeFrom(from.child_tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_watch_state()) {
      set_watch_state(from.watch_state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_task_info()) {
      mutable_task_info()->::dcmd_api::TaskInfo::MergeFrom(from.task_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskWatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskWatchReply::CopyFrom(const UiTaskWatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskWatchReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_task_info()) {
    if (!this->task_info().IsInitialized()) return false;
  }
  for (int i = 0; i < child_tasks_size(); i++) {
    if (!this->child_tasks(i).IsInitialized()) return false;
  }
  return true;
}

void UiTaskWatchReply::Swap(UiTaskWatchReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(watch_state_, other->watch_state_);
    std::swap(err_, other->err_);
    std::swap(task_info_, other->task_info_);
    child_tasks_.Swap(&other->child_tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskWatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskWatchReply_descriptor_;
  metadata.reflection = UiTaskWatchReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskCancelWatch::kClientMsgIdFieldNumber;
const int UiTaskCancelWatch::kTaskIdFieldNumber;
const int UiTaskCancelWatch::kUserFieldNumber;
const int UiTaskCancelWatch::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiTaskCancelWatch::UiTaskCancelWatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskCancelWatch::InitAsDefaultInstance() {
}

UiTaskCancelWatch::UiTaskCancelWatch(const UiTaskCancelWatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskCancelWatch::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskCancelWatch::~UiTaskCancelWatch() {
  SharedDtor();
}

void UiTaskCancelWatch::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskCancelWatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskCancelWatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskCancelWatch_descriptor_;
}

const UiTaskCancelWatch& UiTaskCancelWatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskCancelWatch* UiTaskCancelWatch::default_instance_ = NULL;

UiTaskCancelWatch* UiTaskCancelWatch::New() const {
  return new UiTaskCancelWatch;
}

void UiTaskCancelWatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskCancelWatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }
      
      // required string task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }
      
      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }
      
      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskCancelWatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_id(), output);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskCancelWatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }
  
  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }
  
  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskCancelWatch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }
    
    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskCancelWatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskCancelWatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskCancelWatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskCancelWatch::MergeFrom(const UiTaskCancelWatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskCancelWatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskCancelWatch::CopyFrom(const UiTaskCancelWatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskCancelWatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void UiTaskCancelWatch::Swap(UiTaskCancelWatch* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskCancelWatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskCancelWatch_descriptor_;
  metadata.reflection = UiTaskCancelWatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskCancelatchReply::kClientMsgIdFieldNumber;
const int UiTaskCancelatchReply::kStateFieldNumber;
const int UiTaskCancelatchReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiTaskCancelatchReply::UiTaskCancelatchReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskCancelatchReply::InitAsDefaultInstance() {
}

UiTaskCancelatchReply::UiTaskCancelatchReply(const UiTaskCancelatchReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskCancelatchReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskCancelatchReply::~UiTaskCancelatchReply() {
  SharedDtor();
}

void UiTaskCancelatchReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskCancelatchReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskCancelatchReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskCancelatchReply_descriptor_;
}

const UiTaskCancelatchReply& UiTaskCancelatchReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_2eproto();  return *default_instance_;
}

UiTaskCancelatchReply* UiTaskCancelatchReply::default_instance_ = NULL;

UiTaskCancelatchReply* UiTaskCancelatchReply::New() const {
  return new UiTaskCancelatchReply;
}

void UiTaskCancelatchReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskCancelatchReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }
      
      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }
      
      // optional string err = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskCancelatchReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }
  
  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskCancelatchReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }
  
  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }
  
  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskCancelatchReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }
    
    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // optional string err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskCancelatchReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskCancelatchReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskCancelatchReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskCancelatchReply::MergeFrom(const UiTaskCancelatchReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskCancelatchReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskCancelatchReply::CopyFrom(const UiTaskCancelatchReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskCancelatchReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UiTaskCancelatchReply::Swap(UiTaskCancelatchReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskCancelatchReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskCancelatchReply_descriptor_;
  metadata.reflection = UiTaskCancelatchReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcmd_api

// @@protoc_insertion_point(global_scope)
