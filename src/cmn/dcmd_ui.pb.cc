// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcmd_ui.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dcmd_ui.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dcmd_api {

namespace {

const ::google::protobuf::Descriptor* UiTaskOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskOutputReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskOutputReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentRunningTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentRunningTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentRunningTaskReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentRunningTaskReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentRunningOpr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentRunningOpr_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentRunningOprReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentRunningOprReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiExecOprCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiExecOprCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiExecOprCmdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiExecOprCmdReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiInvalidAgentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiInvalidAgentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiInvalidAgentInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiInvalidAgentInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskScriptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskScriptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskScriptInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskScriptInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiOprScriptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiOprScriptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiOprScriptInfoReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiOprScriptInfoReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentTaskProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentTaskProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiAgentTaskProcessReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiAgentTaskProcessReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UiTaskCmdReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UiTaskCmdReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dcmd_5fui_2eproto() {
  protobuf_AddDesc_dcmd_5fui_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dcmd_ui.proto");
  GOOGLE_CHECK(file != NULL);
  UiTaskOutput_descriptor_ = file->message_type(0);
  static const int UiTaskOutput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, passwd_),
  };
  UiTaskOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskOutput_descriptor_,
      UiTaskOutput::default_instance_,
      UiTaskOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskOutput));
  UiTaskOutputReply_descriptor_ = file->message_type(1);
  static const int UiTaskOutputReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, err_),
  };
  UiTaskOutputReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskOutputReply_descriptor_,
      UiTaskOutputReply::default_instance_,
      UiTaskOutputReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskOutputReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskOutputReply));
  UiAgentRunningTask_descriptor_ = file->message_type(2);
  static const int UiAgentRunningTask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, svr_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, passwd_),
  };
  UiAgentRunningTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentRunningTask_descriptor_,
      UiAgentRunningTask::default_instance_,
      UiAgentRunningTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentRunningTask));
  UiAgentRunningTaskReply_descriptor_ = file->message_type(3);
  static const int UiAgentRunningTaskReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, err_),
  };
  UiAgentRunningTaskReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentRunningTaskReply_descriptor_,
      UiAgentRunningTaskReply::default_instance_,
      UiAgentRunningTaskReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningTaskReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentRunningTaskReply));
  UiAgentRunningOpr_descriptor_ = file->message_type(4);
  static const int UiAgentRunningOpr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, passwd_),
  };
  UiAgentRunningOpr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentRunningOpr_descriptor_,
      UiAgentRunningOpr::default_instance_,
      UiAgentRunningOpr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOpr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentRunningOpr));
  UiAgentRunningOprReply_descriptor_ = file->message_type(5);
  static const int UiAgentRunningOprReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, err_),
  };
  UiAgentRunningOprReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentRunningOprReply_descriptor_,
      UiAgentRunningOprReply::default_instance_,
      UiAgentRunningOprReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentRunningOprReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentRunningOprReply));
  UiExecOprCmd_descriptor_ = file->message_type(6);
  static const int UiExecOprCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, opr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, agents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, passwd_),
  };
  UiExecOprCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiExecOprCmd_descriptor_,
      UiExecOprCmd::default_instance_,
      UiExecOprCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiExecOprCmd));
  UiExecOprCmdReply_descriptor_ = file->message_type(7);
  static const int UiExecOprCmdReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, err_),
  };
  UiExecOprCmdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiExecOprCmdReply_descriptor_,
      UiExecOprCmdReply::default_instance_,
      UiExecOprCmdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiExecOprCmdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiExecOprCmdReply));
  UiAgentInfo_descriptor_ = file->message_type(8);
  static const int UiAgentInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, ips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, passwd_),
  };
  UiAgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentInfo_descriptor_,
      UiAgentInfo::default_instance_,
      UiAgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentInfo));
  UiAgentInfoReply_descriptor_ = file->message_type(9);
  static const int UiAgentInfoReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, agentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, err_),
  };
  UiAgentInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentInfoReply_descriptor_,
      UiAgentInfoReply::default_instance_,
      UiAgentInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentInfoReply));
  UiInvalidAgentInfo_descriptor_ = file->message_type(10);
  static const int UiInvalidAgentInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, passwd_),
  };
  UiInvalidAgentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiInvalidAgentInfo_descriptor_,
      UiInvalidAgentInfo::default_instance_,
      UiInvalidAgentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiInvalidAgentInfo));
  UiInvalidAgentInfoReply_descriptor_ = file->message_type(11);
  static const int UiInvalidAgentInfoReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, agentinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, err_),
  };
  UiInvalidAgentInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiInvalidAgentInfoReply_descriptor_,
      UiInvalidAgentInfoReply::default_instance_,
      UiInvalidAgentInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiInvalidAgentInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiInvalidAgentInfoReply));
  UiTaskScriptInfo_descriptor_ = file->message_type(12);
  static const int UiTaskScriptInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, task_cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, passwd_),
  };
  UiTaskScriptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskScriptInfo_descriptor_,
      UiTaskScriptInfo::default_instance_,
      UiTaskScriptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskScriptInfo));
  UiTaskScriptInfoReply_descriptor_ = file->message_type(13);
  static const int UiTaskScriptInfoReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, md5_),
  };
  UiTaskScriptInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskScriptInfoReply_descriptor_,
      UiTaskScriptInfoReply::default_instance_,
      UiTaskScriptInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskScriptInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskScriptInfoReply));
  UiOprScriptInfo_descriptor_ = file->message_type(14);
  static const int UiOprScriptInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, opr_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, passwd_),
  };
  UiOprScriptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiOprScriptInfo_descriptor_,
      UiOprScriptInfo::default_instance_,
      UiOprScriptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiOprScriptInfo));
  UiOprScriptInfoReply_descriptor_ = file->message_type(15);
  static const int UiOprScriptInfoReply_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, md5_),
  };
  UiOprScriptInfoReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiOprScriptInfoReply_descriptor_,
      UiOprScriptInfoReply::default_instance_,
      UiOprScriptInfoReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiOprScriptInfoReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiOprScriptInfoReply));
  UiAgentTaskProcess_descriptor_ = file->message_type(16);
  static const int UiAgentTaskProcess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, passwd_),
  };
  UiAgentTaskProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentTaskProcess_descriptor_,
      UiAgentTaskProcess::default_instance_,
      UiAgentTaskProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentTaskProcess));
  UiAgentTaskProcessReply_descriptor_ = file->message_type(17);
  static const int UiAgentTaskProcessReply_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, err_),
  };
  UiAgentTaskProcessReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiAgentTaskProcessReply_descriptor_,
      UiAgentTaskProcessReply::default_instance_,
      UiAgentTaskProcessReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiAgentTaskProcessReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiAgentTaskProcessReply));
  UiTaskCmd_descriptor_ = file->message_type(18);
  static const int UiTaskCmd_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, subtask_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, svr_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, svr_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, concurrent_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, concurrent_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, task_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, auto__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, cmd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, passwd_),
  };
  UiTaskCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskCmd_descriptor_,
      UiTaskCmd::default_instance_,
      UiTaskCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskCmd));
  UiTaskCmdReply_descriptor_ = file->message_type(19);
  static const int UiTaskCmdReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, client_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, err_),
  };
  UiTaskCmdReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UiTaskCmdReply_descriptor_,
      UiTaskCmdReply::default_instance_,
      UiTaskCmdReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UiTaskCmdReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UiTaskCmdReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dcmd_5fui_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskOutput_descriptor_, &UiTaskOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskOutputReply_descriptor_, &UiTaskOutputReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentRunningTask_descriptor_, &UiAgentRunningTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentRunningTaskReply_descriptor_, &UiAgentRunningTaskReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentRunningOpr_descriptor_, &UiAgentRunningOpr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentRunningOprReply_descriptor_, &UiAgentRunningOprReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiExecOprCmd_descriptor_, &UiExecOprCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiExecOprCmdReply_descriptor_, &UiExecOprCmdReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentInfo_descriptor_, &UiAgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentInfoReply_descriptor_, &UiAgentInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiInvalidAgentInfo_descriptor_, &UiInvalidAgentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiInvalidAgentInfoReply_descriptor_, &UiInvalidAgentInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskScriptInfo_descriptor_, &UiTaskScriptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskScriptInfoReply_descriptor_, &UiTaskScriptInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiOprScriptInfo_descriptor_, &UiOprScriptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiOprScriptInfoReply_descriptor_, &UiOprScriptInfoReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentTaskProcess_descriptor_, &UiAgentTaskProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiAgentTaskProcessReply_descriptor_, &UiAgentTaskProcessReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskCmd_descriptor_, &UiTaskCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UiTaskCmdReply_descriptor_, &UiTaskCmdReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dcmd_5fui_2eproto() {
  delete UiTaskOutput::default_instance_;
  delete UiTaskOutput_reflection_;
  delete UiTaskOutputReply::default_instance_;
  delete UiTaskOutputReply_reflection_;
  delete UiAgentRunningTask::default_instance_;
  delete UiAgentRunningTask_reflection_;
  delete UiAgentRunningTaskReply::default_instance_;
  delete UiAgentRunningTaskReply_reflection_;
  delete UiAgentRunningOpr::default_instance_;
  delete UiAgentRunningOpr_reflection_;
  delete UiAgentRunningOprReply::default_instance_;
  delete UiAgentRunningOprReply_reflection_;
  delete UiExecOprCmd::default_instance_;
  delete UiExecOprCmd_reflection_;
  delete UiExecOprCmdReply::default_instance_;
  delete UiExecOprCmdReply_reflection_;
  delete UiAgentInfo::default_instance_;
  delete UiAgentInfo_reflection_;
  delete UiAgentInfoReply::default_instance_;
  delete UiAgentInfoReply_reflection_;
  delete UiInvalidAgentInfo::default_instance_;
  delete UiInvalidAgentInfo_reflection_;
  delete UiInvalidAgentInfoReply::default_instance_;
  delete UiInvalidAgentInfoReply_reflection_;
  delete UiTaskScriptInfo::default_instance_;
  delete UiTaskScriptInfo_reflection_;
  delete UiTaskScriptInfoReply::default_instance_;
  delete UiTaskScriptInfoReply_reflection_;
  delete UiOprScriptInfo::default_instance_;
  delete UiOprScriptInfo_reflection_;
  delete UiOprScriptInfoReply::default_instance_;
  delete UiOprScriptInfoReply_reflection_;
  delete UiAgentTaskProcess::default_instance_;
  delete UiAgentTaskProcess_reflection_;
  delete UiAgentTaskProcessReply::default_instance_;
  delete UiAgentTaskProcessReply_reflection_;
  delete UiTaskCmd::default_instance_;
  delete UiTaskCmd_reflection_;
  delete UiTaskCmdReply::default_instance_;
  delete UiTaskCmdReply_reflection_;
}

void protobuf_AddDesc_dcmd_5fui_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dcmd_api::protobuf_AddDesc_dcmd_5fcmn_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdcmd_ui.proto\022\010dcmd_api\032\016dcmd_cmn.prot"
    "o\"s\n\014UiTaskOutput\022\025\n\rclient_msg_id\030\001 \002(\005"
    "\022\022\n\nsubtask_id\030\002 \002(\t\022\n\n\002ip\030\003 \002(\t\022\016\n\006offs"
    "et\030\004 \002(\005\022\014\n\004user\030\005 \002(\t\022\016\n\006passwd\030\006 \002(\t\"{"
    "\n\021UiTaskOutputReply\022\025\n\rclient_msg_id\030\001 \002"
    "(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd_api.DcmdState\022\016"
    "\n\006result\030\003 \002(\t\022\016\n\006offset\030\004 \002(\005\022\013\n\003err\030\005 "
    "\001(\t\"g\n\022UiAgentRunningTask\022\025\n\rclient_msg_"
    "id\030\001 \002(\005\022\n\n\002ip\030\002 \001(\t\022\020\n\010svr_pool\030\003 \001(\t\022\014"
    "\n\004user\030\004 \002(\t\022\016\n\006passwd\030\005 \002(\t\"\210\001\n\027UiAgent"
    "RunningTaskReply\022\025\n\rclient_msg_id\030\001 \002(\005\022"
    "\"\n\005state\030\002 \002(\0162\023.dcmd_api.DcmdState\022%\n\006r"
    "esult\030\003 \003(\0132\025.dcmd_api.SubTaskInfo\022\013\n\003er"
    "r\030\004 \001(\t\"T\n\021UiAgentRunningOpr\022\025\n\rclient_m"
    "sg_id\030\001 \002(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004user\030\003 \002(\t\022\016\n"
    "\006passwd\030\004 \002(\t\"\203\001\n\026UiAgentRunningOprReply"
    "\022\025\n\rclient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023"
    ".dcmd_api.DcmdState\022!\n\006result\030\003 \003(\0132\021.dc"
    "md_api.OprInfo\022\013\n\003err\030\004 \001(\t\"\205\001\n\014UiExecOp"
    "rCmd\022\025\n\rclient_msg_id\030\001 \002(\005\022\016\n\006opr_id\030\002 "
    "\001(\t\022 \n\004args\030\003 \003(\0132\022.dcmd_api.KeyValue\022\016\n"
    "\006agents\030\004 \003(\t\022\014\n\004user\030\005 \002(\t\022\016\n\006passwd\030\006 "
    "\002(\t\"\207\001\n\021UiExecOprCmdReply\022\025\n\rclient_msg_"
    "id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd_api.DcmdS"
    "tate\022*\n\006result\030\003 \003(\0132\032.dcmd_api.AgentOpr"
    "CmdReply\022\013\n\003err\030\004 \001(\t\"`\n\013UiAgentInfo\022\025\n\r"
    "client_msg_id\030\001 \002(\005\022\013\n\003ips\030\002 \003(\t\022\017\n\007vers"
    "ion\030\003 \002(\010\022\014\n\004user\030\004 \002(\t\022\016\n\006passwd\030\005 \002(\t\""
    "\202\001\n\020UiAgentInfoReply\022\025\n\rclient_msg_id\030\001 "
    "\002(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd_api.DcmdState\022"
    "&\n\tagentinfo\030\003 \003(\0132\023.dcmd_api.AgentInfo\022"
    "\013\n\003err\030\004 \001(\t\"I\n\022UiInvalidAgentInfo\022\025\n\rcl"
    "ient_msg_id\030\001 \002(\005\022\014\n\004user\030\002 \002(\t\022\016\n\006passw"
    "d\030\003 \002(\t\"\211\001\n\027UiInvalidAgentInfoReply\022\025\n\rc"
    "lient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd"
    "_api.DcmdState\022&\n\tagentinfo\030\003 \003(\0132\023.dcmd"
    "_api.AgentInfo\022\013\n\003err\030\004 \001(\t\"Y\n\020UiTaskScr"
    "iptInfo\022\025\n\rclient_msg_id\030\001 \002(\005\022\020\n\010task_c"
    "md\030\002 \002(\t\022\014\n\004user\030\003 \002(\t\022\016\n\006passwd\030\004 \002(\t\"|"
    "\n\025UiTaskScriptInfoReply\022\025\n\rclient_msg_id"
    "\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd_api.DcmdSta"
    "te\022\016\n\006script\030\003 \001(\t\022\013\n\003err\030\004 \001(\t\022\013\n\003md5\030\005"
    " \001(\t\"X\n\017UiOprScriptInfo\022\025\n\rclient_msg_id"
    "\030\001 \002(\005\022\020\n\010opr_file\030\002 \002(\t\022\014\n\004user\030\003 \002(\t\022\016"
    "\n\006passwd\030\004 \002(\t\"{\n\024UiOprScriptInfoReply\022\025"
    "\n\rclient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.d"
    "cmd_api.DcmdState\022\016\n\006script\030\003 \001(\t\022\013\n\003err"
    "\030\004 \001(\t\022\013\n\003md5\030\005 \001(\t\"]\n\022UiAgentTaskProces"
    "s\022\025\n\rclient_msg_id\030\001 \002(\005\022\022\n\nsubtask_id\030\002"
    " \003(\t\022\014\n\004user\030\003 \002(\t\022\016\n\006passwd\030\004 \002(\t\"\214\001\n\027U"
    "iAgentTaskProcessReply\022\025\n\rclient_msg_id\030"
    "\001 \002(\005\022\"\n\005state\030\002 \002(\0162\023.dcmd_api.DcmdStat"
    "e\022)\n\007process\030\003 \003(\0132\030.dcmd_api.SubTaskPro"
    "cess\022\013\n\003err\030\004 \001(\t\"\234\002\n\tUiTaskCmd\022\025\n\rclien"
    "t_msg_id\030\001 \002(\005\022\017\n\007task_id\030\002 \002(\t\022\013\n\003uid\030\003"
    " \002(\005\022\022\n\nsubtask_id\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\020\n\010"
    "svr_name\030\006 \001(\t\022\020\n\010svr_pool\030\007 \001(\t\022\026\n\016conc"
    "urrent_num\030\010 \001(\005\022\027\n\017concurrent_rate\030\t \001("
    "\005\022\024\n\014task_timeout\030\n \001(\005\022\014\n\004auto\030\013 \001(\010\022#\n"
    "\010cmd_type\030\014 \002(\0162\021.dcmd_api.CmdType\022\014\n\004us"
    "er\030\r \002(\t\022\016\n\006passwd\030\016 \002(\t\"X\n\016UiTaskCmdRep"
    "ly\022\025\n\rclient_msg_id\030\001 \002(\005\022\"\n\005state\030\002 \002(\016"
    "2\023.dcmd_api.DcmdState\022\013\n\003err\030\004 \001(\tB\021\n\017co"
    "m.cwinux.dcmd", 2533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dcmd_ui.proto", &protobuf_RegisterTypes);
  UiTaskOutput::default_instance_ = new UiTaskOutput();
  UiTaskOutputReply::default_instance_ = new UiTaskOutputReply();
  UiAgentRunningTask::default_instance_ = new UiAgentRunningTask();
  UiAgentRunningTaskReply::default_instance_ = new UiAgentRunningTaskReply();
  UiAgentRunningOpr::default_instance_ = new UiAgentRunningOpr();
  UiAgentRunningOprReply::default_instance_ = new UiAgentRunningOprReply();
  UiExecOprCmd::default_instance_ = new UiExecOprCmd();
  UiExecOprCmdReply::default_instance_ = new UiExecOprCmdReply();
  UiAgentInfo::default_instance_ = new UiAgentInfo();
  UiAgentInfoReply::default_instance_ = new UiAgentInfoReply();
  UiInvalidAgentInfo::default_instance_ = new UiInvalidAgentInfo();
  UiInvalidAgentInfoReply::default_instance_ = new UiInvalidAgentInfoReply();
  UiTaskScriptInfo::default_instance_ = new UiTaskScriptInfo();
  UiTaskScriptInfoReply::default_instance_ = new UiTaskScriptInfoReply();
  UiOprScriptInfo::default_instance_ = new UiOprScriptInfo();
  UiOprScriptInfoReply::default_instance_ = new UiOprScriptInfoReply();
  UiAgentTaskProcess::default_instance_ = new UiAgentTaskProcess();
  UiAgentTaskProcessReply::default_instance_ = new UiAgentTaskProcessReply();
  UiTaskCmd::default_instance_ = new UiTaskCmd();
  UiTaskCmdReply::default_instance_ = new UiTaskCmdReply();
  UiTaskOutput::default_instance_->InitAsDefaultInstance();
  UiTaskOutputReply::default_instance_->InitAsDefaultInstance();
  UiAgentRunningTask::default_instance_->InitAsDefaultInstance();
  UiAgentRunningTaskReply::default_instance_->InitAsDefaultInstance();
  UiAgentRunningOpr::default_instance_->InitAsDefaultInstance();
  UiAgentRunningOprReply::default_instance_->InitAsDefaultInstance();
  UiExecOprCmd::default_instance_->InitAsDefaultInstance();
  UiExecOprCmdReply::default_instance_->InitAsDefaultInstance();
  UiAgentInfo::default_instance_->InitAsDefaultInstance();
  UiAgentInfoReply::default_instance_->InitAsDefaultInstance();
  UiInvalidAgentInfo::default_instance_->InitAsDefaultInstance();
  UiInvalidAgentInfoReply::default_instance_->InitAsDefaultInstance();
  UiTaskScriptInfo::default_instance_->InitAsDefaultInstance();
  UiTaskScriptInfoReply::default_instance_->InitAsDefaultInstance();
  UiOprScriptInfo::default_instance_->InitAsDefaultInstance();
  UiOprScriptInfoReply::default_instance_->InitAsDefaultInstance();
  UiAgentTaskProcess::default_instance_->InitAsDefaultInstance();
  UiAgentTaskProcessReply::default_instance_->InitAsDefaultInstance();
  UiTaskCmd::default_instance_->InitAsDefaultInstance();
  UiTaskCmdReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dcmd_5fui_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dcmd_5fui_2eproto {
  StaticDescriptorInitializer_dcmd_5fui_2eproto() {
    protobuf_AddDesc_dcmd_5fui_2eproto();
  }
} static_descriptor_initializer_dcmd_5fui_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int UiTaskOutput::kClientMsgIdFieldNumber;
const int UiTaskOutput::kSubtaskIdFieldNumber;
const int UiTaskOutput::kIpFieldNumber;
const int UiTaskOutput::kOffsetFieldNumber;
const int UiTaskOutput::kUserFieldNumber;
const int UiTaskOutput::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiTaskOutput::UiTaskOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskOutput::InitAsDefaultInstance() {
}

UiTaskOutput::UiTaskOutput(const UiTaskOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskOutput::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskOutput::~UiTaskOutput() {
  SharedDtor();
}

void UiTaskOutput::SharedDtor() {
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskOutput_descriptor_;
}

const UiTaskOutput& UiTaskOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiTaskOutput* UiTaskOutput::default_instance_ = NULL;

UiTaskOutput* UiTaskOutput::New() const {
  return new UiTaskOutput;
}

void UiTaskOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    offset_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtask_id;
        break;
      }

      // required string subtask_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // required int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // required string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_passwd;
        break;
      }

      // required string passwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required string subtask_id = 2;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subtask_id(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // required string passwd = 6;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required string subtask_id = 2;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subtask_id(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // required string passwd = 6;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskOutput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required string subtask_id = 2;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 6;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskOutput::MergeFrom(const UiTaskOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskOutput::CopyFrom(const UiTaskOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskOutput::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void UiTaskOutput::Swap(UiTaskOutput* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(ip_, other->ip_);
    std::swap(offset_, other->offset_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskOutput_descriptor_;
  metadata.reflection = UiTaskOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskOutputReply::kClientMsgIdFieldNumber;
const int UiTaskOutputReply::kStateFieldNumber;
const int UiTaskOutputReply::kResultFieldNumber;
const int UiTaskOutputReply::kOffsetFieldNumber;
const int UiTaskOutputReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiTaskOutputReply::UiTaskOutputReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskOutputReply::InitAsDefaultInstance() {
}

UiTaskOutputReply::UiTaskOutputReply(const UiTaskOutputReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskOutputReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskOutputReply::~UiTaskOutputReply() {
  SharedDtor();
}

void UiTaskOutputReply::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskOutputReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskOutputReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskOutputReply_descriptor_;
}

const UiTaskOutputReply& UiTaskOutputReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiTaskOutputReply* UiTaskOutputReply::default_instance_ = NULL;

UiTaskOutputReply* UiTaskOutputReply::New() const {
  return new UiTaskOutputReply;
}

void UiTaskOutputReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
    offset_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskOutputReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // required string result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // required int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_err;
        break;
      }

      // optional string err = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskOutputReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // required string result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->result(), output);
  }

  // required int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  // optional string err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskOutputReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // required string result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result(), target);
  }

  // required int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  // optional string err = 5;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskOutputReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // required string result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

    // required int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional string err = 5;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskOutputReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskOutputReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskOutputReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskOutputReply::MergeFrom(const UiTaskOutputReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskOutputReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskOutputReply::CopyFrom(const UiTaskOutputReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskOutputReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UiTaskOutputReply::Swap(UiTaskOutputReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(result_, other->result_);
    std::swap(offset_, other->offset_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskOutputReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskOutputReply_descriptor_;
  metadata.reflection = UiTaskOutputReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentRunningTask::kClientMsgIdFieldNumber;
const int UiAgentRunningTask::kIpFieldNumber;
const int UiAgentRunningTask::kSvrPoolFieldNumber;
const int UiAgentRunningTask::kUserFieldNumber;
const int UiAgentRunningTask::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiAgentRunningTask::UiAgentRunningTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentRunningTask::InitAsDefaultInstance() {
}

UiAgentRunningTask::UiAgentRunningTask(const UiAgentRunningTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentRunningTask::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentRunningTask::~UiAgentRunningTask() {
  SharedDtor();
}

void UiAgentRunningTask::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (svr_pool_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_pool_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentRunningTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentRunningTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentRunningTask_descriptor_;
}

const UiAgentRunningTask& UiAgentRunningTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiAgentRunningTask* UiAgentRunningTask::default_instance_ = NULL;

UiAgentRunningTask* UiAgentRunningTask::New() const {
  return new UiAgentRunningTask;
}

void UiAgentRunningTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_svr_pool()) {
      if (svr_pool_ != &::google::protobuf::internal::kEmptyString) {
        svr_pool_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentRunningTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_svr_pool;
        break;
      }

      // optional string svr_pool = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_pool().data(), this->svr_pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_passwd;
        break;
      }

      // required string passwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentRunningTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional string svr_pool = 3;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_pool().data(), this->svr_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->svr_pool(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentRunningTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string svr_pool = 3;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_pool().data(), this->svr_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->svr_pool(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentRunningTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string svr_pool = 3;
    if (has_svr_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_pool());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 5;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentRunningTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentRunningTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentRunningTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentRunningTask::MergeFrom(const UiAgentRunningTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_svr_pool()) {
      set_svr_pool(from.svr_pool());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentRunningTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentRunningTask::CopyFrom(const UiAgentRunningTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentRunningTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

  return true;
}

void UiAgentRunningTask::Swap(UiAgentRunningTask* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(ip_, other->ip_);
    std::swap(svr_pool_, other->svr_pool_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentRunningTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentRunningTask_descriptor_;
  metadata.reflection = UiAgentRunningTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentRunningTaskReply::kClientMsgIdFieldNumber;
const int UiAgentRunningTaskReply::kStateFieldNumber;
const int UiAgentRunningTaskReply::kResultFieldNumber;
const int UiAgentRunningTaskReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiAgentRunningTaskReply::UiAgentRunningTaskReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentRunningTaskReply::InitAsDefaultInstance() {
}

UiAgentRunningTaskReply::UiAgentRunningTaskReply(const UiAgentRunningTaskReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentRunningTaskReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentRunningTaskReply::~UiAgentRunningTaskReply() {
  SharedDtor();
}

void UiAgentRunningTaskReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentRunningTaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentRunningTaskReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentRunningTaskReply_descriptor_;
}

const UiAgentRunningTaskReply& UiAgentRunningTaskReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiAgentRunningTaskReply* UiAgentRunningTaskReply::default_instance_ = NULL;

UiAgentRunningTaskReply* UiAgentRunningTaskReply::New() const {
  return new UiAgentRunningTaskReply;
}

void UiAgentRunningTaskReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentRunningTaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // repeated .dcmd_api.SubTaskInfo result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentRunningTaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // repeated .dcmd_api.SubTaskInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(i), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentRunningTaskReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // repeated .dcmd_api.SubTaskInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(i), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentRunningTaskReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  // repeated .dcmd_api.SubTaskInfo result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentRunningTaskReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentRunningTaskReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentRunningTaskReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentRunningTaskReply::MergeFrom(const UiAgentRunningTaskReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentRunningTaskReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentRunningTaskReply::CopyFrom(const UiAgentRunningTaskReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentRunningTaskReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void UiAgentRunningTaskReply::Swap(UiAgentRunningTaskReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentRunningTaskReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentRunningTaskReply_descriptor_;
  metadata.reflection = UiAgentRunningTaskReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentRunningOpr::kClientMsgIdFieldNumber;
const int UiAgentRunningOpr::kIpFieldNumber;
const int UiAgentRunningOpr::kUserFieldNumber;
const int UiAgentRunningOpr::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiAgentRunningOpr::UiAgentRunningOpr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentRunningOpr::InitAsDefaultInstance() {
}

UiAgentRunningOpr::UiAgentRunningOpr(const UiAgentRunningOpr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentRunningOpr::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentRunningOpr::~UiAgentRunningOpr() {
  SharedDtor();
}

void UiAgentRunningOpr::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentRunningOpr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentRunningOpr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentRunningOpr_descriptor_;
}

const UiAgentRunningOpr& UiAgentRunningOpr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiAgentRunningOpr* UiAgentRunningOpr::default_instance_ = NULL;

UiAgentRunningOpr* UiAgentRunningOpr::New() const {
  return new UiAgentRunningOpr;
}

void UiAgentRunningOpr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentRunningOpr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }

      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentRunningOpr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentRunningOpr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentRunningOpr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentRunningOpr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentRunningOpr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentRunningOpr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentRunningOpr::MergeFrom(const UiAgentRunningOpr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentRunningOpr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentRunningOpr::CopyFrom(const UiAgentRunningOpr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentRunningOpr::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void UiAgentRunningOpr::Swap(UiAgentRunningOpr* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(ip_, other->ip_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentRunningOpr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentRunningOpr_descriptor_;
  metadata.reflection = UiAgentRunningOpr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentRunningOprReply::kClientMsgIdFieldNumber;
const int UiAgentRunningOprReply::kStateFieldNumber;
const int UiAgentRunningOprReply::kResultFieldNumber;
const int UiAgentRunningOprReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiAgentRunningOprReply::UiAgentRunningOprReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentRunningOprReply::InitAsDefaultInstance() {
}

UiAgentRunningOprReply::UiAgentRunningOprReply(const UiAgentRunningOprReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentRunningOprReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentRunningOprReply::~UiAgentRunningOprReply() {
  SharedDtor();
}

void UiAgentRunningOprReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentRunningOprReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentRunningOprReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentRunningOprReply_descriptor_;
}

const UiAgentRunningOprReply& UiAgentRunningOprReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiAgentRunningOprReply* UiAgentRunningOprReply::default_instance_ = NULL;

UiAgentRunningOprReply* UiAgentRunningOprReply::New() const {
  return new UiAgentRunningOprReply;
}

void UiAgentRunningOprReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentRunningOprReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // repeated .dcmd_api.OprInfo result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentRunningOprReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // repeated .dcmd_api.OprInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(i), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentRunningOprReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // repeated .dcmd_api.OprInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(i), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentRunningOprReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  // repeated .dcmd_api.OprInfo result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentRunningOprReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentRunningOprReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentRunningOprReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentRunningOprReply::MergeFrom(const UiAgentRunningOprReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentRunningOprReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentRunningOprReply::CopyFrom(const UiAgentRunningOprReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentRunningOprReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void UiAgentRunningOprReply::Swap(UiAgentRunningOprReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentRunningOprReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentRunningOprReply_descriptor_;
  metadata.reflection = UiAgentRunningOprReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiExecOprCmd::kClientMsgIdFieldNumber;
const int UiExecOprCmd::kOprIdFieldNumber;
const int UiExecOprCmd::kArgsFieldNumber;
const int UiExecOprCmd::kAgentsFieldNumber;
const int UiExecOprCmd::kUserFieldNumber;
const int UiExecOprCmd::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiExecOprCmd::UiExecOprCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiExecOprCmd::InitAsDefaultInstance() {
}

UiExecOprCmd::UiExecOprCmd(const UiExecOprCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiExecOprCmd::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  opr_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiExecOprCmd::~UiExecOprCmd() {
  SharedDtor();
}

void UiExecOprCmd::SharedDtor() {
  if (opr_id_ != &::google::protobuf::internal::kEmptyString) {
    delete opr_id_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiExecOprCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiExecOprCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiExecOprCmd_descriptor_;
}

const UiExecOprCmd& UiExecOprCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiExecOprCmd* UiExecOprCmd::default_instance_ = NULL;

UiExecOprCmd* UiExecOprCmd::New() const {
  return new UiExecOprCmd;
}

void UiExecOprCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_opr_id()) {
      if (opr_id_ != &::google::protobuf::internal::kEmptyString) {
        opr_id_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  args_.Clear();
  agents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiExecOprCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opr_id;
        break;
      }

      // optional string opr_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opr_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opr_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opr_id().data(), this->opr_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }

      // repeated .dcmd_api.KeyValue args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(34)) goto parse_agents;
        break;
      }

      // repeated string agents = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_agents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agents(this->agents_size() - 1).data(),
            this->agents(this->agents_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_agents;
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // required string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_passwd;
        break;
      }

      // required string passwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiExecOprCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // optional string opr_id = 2;
  if (has_opr_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_id().data(), this->opr_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->opr_id(), output);
  }

  // repeated .dcmd_api.KeyValue args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->args(i), output);
  }

  // repeated string agents = 4;
  for (int i = 0; i < this->agents_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->agents(i).data(), this->agents(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->agents(i), output);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // required string passwd = 6;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiExecOprCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // optional string opr_id = 2;
  if (has_opr_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_id().data(), this->opr_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opr_id(), target);
  }

  // repeated .dcmd_api.KeyValue args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->args(i), target);
  }

  // repeated string agents = 4;
  for (int i = 0; i < this->agents_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agents(i).data(), this->agents(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->agents(i), target);
  }

  // required string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // required string passwd = 6;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiExecOprCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // optional string opr_id = 2;
    if (has_opr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opr_id());
    }

    // required string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 6;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  // repeated .dcmd_api.KeyValue args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }

  // repeated string agents = 4;
  total_size += 1 * this->agents_size();
  for (int i = 0; i < this->agents_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->agents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiExecOprCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiExecOprCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiExecOprCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiExecOprCmd::MergeFrom(const UiExecOprCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  agents_.MergeFrom(from.agents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_opr_id()) {
      set_opr_id(from.opr_id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiExecOprCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiExecOprCmd::CopyFrom(const UiExecOprCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiExecOprCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000031) != 0x00000031) return false;

  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void UiExecOprCmd::Swap(UiExecOprCmd* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(opr_id_, other->opr_id_);
    args_.Swap(&other->args_);
    agents_.Swap(&other->agents_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiExecOprCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiExecOprCmd_descriptor_;
  metadata.reflection = UiExecOprCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiExecOprCmdReply::kClientMsgIdFieldNumber;
const int UiExecOprCmdReply::kStateFieldNumber;
const int UiExecOprCmdReply::kResultFieldNumber;
const int UiExecOprCmdReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiExecOprCmdReply::UiExecOprCmdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiExecOprCmdReply::InitAsDefaultInstance() {
}

UiExecOprCmdReply::UiExecOprCmdReply(const UiExecOprCmdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiExecOprCmdReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiExecOprCmdReply::~UiExecOprCmdReply() {
  SharedDtor();
}

void UiExecOprCmdReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiExecOprCmdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiExecOprCmdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiExecOprCmdReply_descriptor_;
}

const UiExecOprCmdReply& UiExecOprCmdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiExecOprCmdReply* UiExecOprCmdReply::default_instance_ = NULL;

UiExecOprCmdReply* UiExecOprCmdReply::New() const {
  return new UiExecOprCmdReply;
}

void UiExecOprCmdReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiExecOprCmdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // repeated .dcmd_api.AgentOprCmdReply result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiExecOprCmdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // repeated .dcmd_api.AgentOprCmdReply result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(i), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiExecOprCmdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // repeated .dcmd_api.AgentOprCmdReply result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(i), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiExecOprCmdReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  // repeated .dcmd_api.AgentOprCmdReply result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiExecOprCmdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiExecOprCmdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiExecOprCmdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiExecOprCmdReply::MergeFrom(const UiExecOprCmdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiExecOprCmdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiExecOprCmdReply::CopyFrom(const UiExecOprCmdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiExecOprCmdReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void UiExecOprCmdReply::Swap(UiExecOprCmdReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    result_.Swap(&other->result_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiExecOprCmdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiExecOprCmdReply_descriptor_;
  metadata.reflection = UiExecOprCmdReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentInfo::kClientMsgIdFieldNumber;
const int UiAgentInfo::kIpsFieldNumber;
const int UiAgentInfo::kVersionFieldNumber;
const int UiAgentInfo::kUserFieldNumber;
const int UiAgentInfo::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiAgentInfo::UiAgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentInfo::InitAsDefaultInstance() {
}

UiAgentInfo::UiAgentInfo(const UiAgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentInfo::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  version_ = false;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentInfo::~UiAgentInfo() {
  SharedDtor();
}

void UiAgentInfo::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentInfo_descriptor_;
}

const UiAgentInfo& UiAgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiAgentInfo* UiAgentInfo::default_instance_ = NULL;

UiAgentInfo* UiAgentInfo::New() const {
  return new UiAgentInfo;
}

void UiAgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    version_ = false;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ips;
        break;
      }

      // repeated string ips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ips()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ips(this->ips_size() - 1).data(),
            this->ips(this->ips_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ips;
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required bool version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_passwd;
        break;
      }

      // required string passwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // repeated string ips = 2;
  for (int i = 0; i < this->ips_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ips(i).data(), this->ips(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ips(i), output);
  }

  // required bool version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->version(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // repeated string ips = 2;
  for (int i = 0; i < this->ips_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ips(i).data(), this->ips(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ips(i), target);
  }

  // required bool version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->version(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // required string passwd = 5;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required bool version = 3;
    if (has_version()) {
      total_size += 1 + 1;
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 5;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  // repeated string ips = 2;
  total_size += 1 * this->ips_size();
  for (int i = 0; i < this->ips_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentInfo::MergeFrom(const UiAgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ips_.MergeFrom(from.ips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentInfo::CopyFrom(const UiAgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void UiAgentInfo::Swap(UiAgentInfo* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    ips_.Swap(&other->ips_);
    std::swap(version_, other->version_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentInfo_descriptor_;
  metadata.reflection = UiAgentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentInfoReply::kClientMsgIdFieldNumber;
const int UiAgentInfoReply::kStateFieldNumber;
const int UiAgentInfoReply::kAgentinfoFieldNumber;
const int UiAgentInfoReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiAgentInfoReply::UiAgentInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentInfoReply::InitAsDefaultInstance() {
}

UiAgentInfoReply::UiAgentInfoReply(const UiAgentInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentInfoReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentInfoReply::~UiAgentInfoReply() {
  SharedDtor();
}

void UiAgentInfoReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentInfoReply_descriptor_;
}

const UiAgentInfoReply& UiAgentInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiAgentInfoReply* UiAgentInfoReply::default_instance_ = NULL;

UiAgentInfoReply* UiAgentInfoReply::New() const {
  return new UiAgentInfoReply;
}

void UiAgentInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  agentinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agentinfo;
        break;
      }

      // repeated .dcmd_api.AgentInfo agentinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agentinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agentinfo;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  for (int i = 0; i < this->agentinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->agentinfo(i), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  for (int i = 0; i < this->agentinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->agentinfo(i), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  total_size += 1 * this->agentinfo_size();
  for (int i = 0; i < this->agentinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agentinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentInfoReply::MergeFrom(const UiAgentInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  agentinfo_.MergeFrom(from.agentinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentInfoReply::CopyFrom(const UiAgentInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < agentinfo_size(); i++) {
    if (!this->agentinfo(i).IsInitialized()) return false;
  }
  return true;
}

void UiAgentInfoReply::Swap(UiAgentInfoReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    agentinfo_.Swap(&other->agentinfo_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentInfoReply_descriptor_;
  metadata.reflection = UiAgentInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiInvalidAgentInfo::kClientMsgIdFieldNumber;
const int UiInvalidAgentInfo::kUserFieldNumber;
const int UiInvalidAgentInfo::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiInvalidAgentInfo::UiInvalidAgentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiInvalidAgentInfo::InitAsDefaultInstance() {
}

UiInvalidAgentInfo::UiInvalidAgentInfo(const UiInvalidAgentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiInvalidAgentInfo::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiInvalidAgentInfo::~UiInvalidAgentInfo() {
  SharedDtor();
}

void UiInvalidAgentInfo::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiInvalidAgentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiInvalidAgentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiInvalidAgentInfo_descriptor_;
}

const UiInvalidAgentInfo& UiInvalidAgentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiInvalidAgentInfo* UiInvalidAgentInfo::default_instance_ = NULL;

UiInvalidAgentInfo* UiInvalidAgentInfo::New() const {
  return new UiInvalidAgentInfo;
}

void UiInvalidAgentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiInvalidAgentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // required string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiInvalidAgentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }

  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiInvalidAgentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  // required string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiInvalidAgentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiInvalidAgentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiInvalidAgentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiInvalidAgentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiInvalidAgentInfo::MergeFrom(const UiInvalidAgentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiInvalidAgentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiInvalidAgentInfo::CopyFrom(const UiInvalidAgentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiInvalidAgentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UiInvalidAgentInfo::Swap(UiInvalidAgentInfo* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiInvalidAgentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiInvalidAgentInfo_descriptor_;
  metadata.reflection = UiInvalidAgentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiInvalidAgentInfoReply::kClientMsgIdFieldNumber;
const int UiInvalidAgentInfoReply::kStateFieldNumber;
const int UiInvalidAgentInfoReply::kAgentinfoFieldNumber;
const int UiInvalidAgentInfoReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiInvalidAgentInfoReply::UiInvalidAgentInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiInvalidAgentInfoReply::InitAsDefaultInstance() {
}

UiInvalidAgentInfoReply::UiInvalidAgentInfoReply(const UiInvalidAgentInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiInvalidAgentInfoReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiInvalidAgentInfoReply::~UiInvalidAgentInfoReply() {
  SharedDtor();
}

void UiInvalidAgentInfoReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiInvalidAgentInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiInvalidAgentInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiInvalidAgentInfoReply_descriptor_;
}

const UiInvalidAgentInfoReply& UiInvalidAgentInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiInvalidAgentInfoReply* UiInvalidAgentInfoReply::default_instance_ = NULL;

UiInvalidAgentInfoReply* UiInvalidAgentInfoReply::New() const {
  return new UiInvalidAgentInfoReply;
}

void UiInvalidAgentInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  agentinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiInvalidAgentInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agentinfo;
        break;
      }

      // repeated .dcmd_api.AgentInfo agentinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_agentinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agentinfo;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiInvalidAgentInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  for (int i = 0; i < this->agentinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->agentinfo(i), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiInvalidAgentInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  for (int i = 0; i < this->agentinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->agentinfo(i), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiInvalidAgentInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  // repeated .dcmd_api.AgentInfo agentinfo = 3;
  total_size += 1 * this->agentinfo_size();
  for (int i = 0; i < this->agentinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->agentinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiInvalidAgentInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiInvalidAgentInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiInvalidAgentInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiInvalidAgentInfoReply::MergeFrom(const UiInvalidAgentInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  agentinfo_.MergeFrom(from.agentinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiInvalidAgentInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiInvalidAgentInfoReply::CopyFrom(const UiInvalidAgentInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiInvalidAgentInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < agentinfo_size(); i++) {
    if (!this->agentinfo(i).IsInitialized()) return false;
  }
  return true;
}

void UiInvalidAgentInfoReply::Swap(UiInvalidAgentInfoReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    agentinfo_.Swap(&other->agentinfo_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiInvalidAgentInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiInvalidAgentInfoReply_descriptor_;
  metadata.reflection = UiInvalidAgentInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskScriptInfo::kClientMsgIdFieldNumber;
const int UiTaskScriptInfo::kTaskCmdFieldNumber;
const int UiTaskScriptInfo::kUserFieldNumber;
const int UiTaskScriptInfo::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiTaskScriptInfo::UiTaskScriptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskScriptInfo::InitAsDefaultInstance() {
}

UiTaskScriptInfo::UiTaskScriptInfo(const UiTaskScriptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskScriptInfo::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  task_cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskScriptInfo::~UiTaskScriptInfo() {
  SharedDtor();
}

void UiTaskScriptInfo::SharedDtor() {
  if (task_cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete task_cmd_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskScriptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskScriptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskScriptInfo_descriptor_;
}

const UiTaskScriptInfo& UiTaskScriptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiTaskScriptInfo* UiTaskScriptInfo::default_instance_ = NULL;

UiTaskScriptInfo* UiTaskScriptInfo::New() const {
  return new UiTaskScriptInfo;
}

void UiTaskScriptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_task_cmd()) {
      if (task_cmd_ != &::google::protobuf::internal::kEmptyString) {
        task_cmd_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskScriptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_cmd;
        break;
      }

      // required string task_cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_cmd().data(), this->task_cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }

      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskScriptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required string task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_cmd().data(), this->task_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_cmd(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskScriptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required string task_cmd = 2;
  if (has_task_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_cmd().data(), this->task_cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_cmd(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskScriptInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required string task_cmd = 2;
    if (has_task_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_cmd());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskScriptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskScriptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskScriptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskScriptInfo::MergeFrom(const UiTaskScriptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_task_cmd()) {
      set_task_cmd(from.task_cmd());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskScriptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskScriptInfo::CopyFrom(const UiTaskScriptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskScriptInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UiTaskScriptInfo::Swap(UiTaskScriptInfo* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(task_cmd_, other->task_cmd_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskScriptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskScriptInfo_descriptor_;
  metadata.reflection = UiTaskScriptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskScriptInfoReply::kClientMsgIdFieldNumber;
const int UiTaskScriptInfoReply::kStateFieldNumber;
const int UiTaskScriptInfoReply::kScriptFieldNumber;
const int UiTaskScriptInfoReply::kErrFieldNumber;
const int UiTaskScriptInfoReply::kMd5FieldNumber;
#endif  // !_MSC_VER

UiTaskScriptInfoReply::UiTaskScriptInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskScriptInfoReply::InitAsDefaultInstance() {
}

UiTaskScriptInfoReply::UiTaskScriptInfoReply(const UiTaskScriptInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskScriptInfoReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskScriptInfoReply::~UiTaskScriptInfoReply() {
  SharedDtor();
}

void UiTaskScriptInfoReply::SharedDtor() {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskScriptInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskScriptInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskScriptInfoReply_descriptor_;
}

const UiTaskScriptInfoReply& UiTaskScriptInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiTaskScriptInfoReply* UiTaskScriptInfoReply::default_instance_ = NULL;

UiTaskScriptInfoReply* UiTaskScriptInfoReply::New() const {
  return new UiTaskScriptInfoReply;
}

void UiTaskScriptInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskScriptInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_script;
        break;
      }

      // optional string script = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_md5;
        break;
      }

      // optional string md5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskScriptInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional string script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->script(), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskScriptInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional string script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->script(), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskScriptInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string script = 3;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

    // optional string md5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskScriptInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskScriptInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskScriptInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskScriptInfoReply::MergeFrom(const UiTaskScriptInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskScriptInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskScriptInfoReply::CopyFrom(const UiTaskScriptInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskScriptInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UiTaskScriptInfoReply::Swap(UiTaskScriptInfoReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(script_, other->script_);
    std::swap(err_, other->err_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskScriptInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskScriptInfoReply_descriptor_;
  metadata.reflection = UiTaskScriptInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiOprScriptInfo::kClientMsgIdFieldNumber;
const int UiOprScriptInfo::kOprFileFieldNumber;
const int UiOprScriptInfo::kUserFieldNumber;
const int UiOprScriptInfo::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiOprScriptInfo::UiOprScriptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiOprScriptInfo::InitAsDefaultInstance() {
}

UiOprScriptInfo::UiOprScriptInfo(const UiOprScriptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiOprScriptInfo::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  opr_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiOprScriptInfo::~UiOprScriptInfo() {
  SharedDtor();
}

void UiOprScriptInfo::SharedDtor() {
  if (opr_file_ != &::google::protobuf::internal::kEmptyString) {
    delete opr_file_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiOprScriptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiOprScriptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiOprScriptInfo_descriptor_;
}

const UiOprScriptInfo& UiOprScriptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiOprScriptInfo* UiOprScriptInfo::default_instance_ = NULL;

UiOprScriptInfo* UiOprScriptInfo::New() const {
  return new UiOprScriptInfo;
}

void UiOprScriptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_opr_file()) {
      if (opr_file_ != &::google::protobuf::internal::kEmptyString) {
        opr_file_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiOprScriptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_opr_file;
        break;
      }

      // required string opr_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opr_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opr_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opr_file().data(), this->opr_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }

      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiOprScriptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required string opr_file = 2;
  if (has_opr_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_file().data(), this->opr_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->opr_file(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiOprScriptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required string opr_file = 2;
  if (has_opr_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opr_file().data(), this->opr_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opr_file(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiOprScriptInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required string opr_file = 2;
    if (has_opr_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opr_file());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiOprScriptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiOprScriptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiOprScriptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiOprScriptInfo::MergeFrom(const UiOprScriptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_opr_file()) {
      set_opr_file(from.opr_file());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiOprScriptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiOprScriptInfo::CopyFrom(const UiOprScriptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiOprScriptInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UiOprScriptInfo::Swap(UiOprScriptInfo* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(opr_file_, other->opr_file_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiOprScriptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiOprScriptInfo_descriptor_;
  metadata.reflection = UiOprScriptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiOprScriptInfoReply::kClientMsgIdFieldNumber;
const int UiOprScriptInfoReply::kStateFieldNumber;
const int UiOprScriptInfoReply::kScriptFieldNumber;
const int UiOprScriptInfoReply::kErrFieldNumber;
const int UiOprScriptInfoReply::kMd5FieldNumber;
#endif  // !_MSC_VER

UiOprScriptInfoReply::UiOprScriptInfoReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiOprScriptInfoReply::InitAsDefaultInstance() {
}

UiOprScriptInfoReply::UiOprScriptInfoReply(const UiOprScriptInfoReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiOprScriptInfoReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiOprScriptInfoReply::~UiOprScriptInfoReply() {
  SharedDtor();
}

void UiOprScriptInfoReply::SharedDtor() {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void UiOprScriptInfoReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiOprScriptInfoReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiOprScriptInfoReply_descriptor_;
}

const UiOprScriptInfoReply& UiOprScriptInfoReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiOprScriptInfoReply* UiOprScriptInfoReply::default_instance_ = NULL;

UiOprScriptInfoReply* UiOprScriptInfoReply::New() const {
  return new UiOprScriptInfoReply;
}

void UiOprScriptInfoReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiOprScriptInfoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_script;
        break;
      }

      // optional string script = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_script:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_script()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->script().data(), this->script().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_md5;
        break;
      }

      // optional string md5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiOprScriptInfoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional string script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->script(), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiOprScriptInfoReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional string script = 3;
  if (has_script()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->script().data(), this->script().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->script(), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  // optional string md5 = 5;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiOprScriptInfoReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string script = 3;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->script());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

    // optional string md5 = 5;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiOprScriptInfoReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiOprScriptInfoReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiOprScriptInfoReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiOprScriptInfoReply::MergeFrom(const UiOprScriptInfoReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiOprScriptInfoReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiOprScriptInfoReply::CopyFrom(const UiOprScriptInfoReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiOprScriptInfoReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UiOprScriptInfoReply::Swap(UiOprScriptInfoReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(script_, other->script_);
    std::swap(err_, other->err_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiOprScriptInfoReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiOprScriptInfoReply_descriptor_;
  metadata.reflection = UiOprScriptInfoReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentTaskProcess::kClientMsgIdFieldNumber;
const int UiAgentTaskProcess::kSubtaskIdFieldNumber;
const int UiAgentTaskProcess::kUserFieldNumber;
const int UiAgentTaskProcess::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiAgentTaskProcess::UiAgentTaskProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentTaskProcess::InitAsDefaultInstance() {
}

UiAgentTaskProcess::UiAgentTaskProcess(const UiAgentTaskProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentTaskProcess::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentTaskProcess::~UiAgentTaskProcess() {
  SharedDtor();
}

void UiAgentTaskProcess::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentTaskProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentTaskProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentTaskProcess_descriptor_;
}

const UiAgentTaskProcess& UiAgentTaskProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiAgentTaskProcess* UiAgentTaskProcess::default_instance_ = NULL;

UiAgentTaskProcess* UiAgentTaskProcess::New() const {
  return new UiAgentTaskProcess;
}

void UiAgentTaskProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  subtask_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentTaskProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtask_id;
        break;
      }

      // repeated string subtask_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id(this->subtask_id_size() - 1).data(),
            this->subtask_id(this->subtask_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_subtask_id;
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_passwd;
        break;
      }

      // required string passwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentTaskProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // repeated string subtask_id = 2;
  for (int i = 0; i < this->subtask_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->subtask_id(i).data(), this->subtask_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subtask_id(i), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentTaskProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // repeated string subtask_id = 2;
  for (int i = 0; i < this->subtask_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id(i).data(), this->subtask_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->subtask_id(i), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  // required string passwd = 4;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentTaskProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 4;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  // repeated string subtask_id = 2;
  total_size += 1 * this->subtask_id_size();
  for (int i = 0; i < this->subtask_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subtask_id(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentTaskProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentTaskProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentTaskProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentTaskProcess::MergeFrom(const UiAgentTaskProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  subtask_id_.MergeFrom(from.subtask_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentTaskProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentTaskProcess::CopyFrom(const UiAgentTaskProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentTaskProcess::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  return true;
}

void UiAgentTaskProcess::Swap(UiAgentTaskProcess* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    subtask_id_.Swap(&other->subtask_id_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentTaskProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentTaskProcess_descriptor_;
  metadata.reflection = UiAgentTaskProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiAgentTaskProcessReply::kClientMsgIdFieldNumber;
const int UiAgentTaskProcessReply::kStateFieldNumber;
const int UiAgentTaskProcessReply::kProcessFieldNumber;
const int UiAgentTaskProcessReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiAgentTaskProcessReply::UiAgentTaskProcessReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiAgentTaskProcessReply::InitAsDefaultInstance() {
}

UiAgentTaskProcessReply::UiAgentTaskProcessReply(const UiAgentTaskProcessReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiAgentTaskProcessReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiAgentTaskProcessReply::~UiAgentTaskProcessReply() {
  SharedDtor();
}

void UiAgentTaskProcessReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiAgentTaskProcessReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiAgentTaskProcessReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiAgentTaskProcessReply_descriptor_;
}

const UiAgentTaskProcessReply& UiAgentTaskProcessReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiAgentTaskProcessReply* UiAgentTaskProcessReply::default_instance_ = NULL;

UiAgentTaskProcessReply* UiAgentTaskProcessReply::New() const {
  return new UiAgentTaskProcessReply;
}

void UiAgentTaskProcessReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  process_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiAgentTaskProcessReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_process;
        break;
      }

      // repeated .dcmd_api.SubTaskProcess process = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_process;
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiAgentTaskProcessReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // repeated .dcmd_api.SubTaskProcess process = 3;
  for (int i = 0; i < this->process_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->process(i), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiAgentTaskProcessReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // repeated .dcmd_api.SubTaskProcess process = 3;
  for (int i = 0; i < this->process_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->process(i), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiAgentTaskProcessReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  // repeated .dcmd_api.SubTaskProcess process = 3;
  total_size += 1 * this->process_size();
  for (int i = 0; i < this->process_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->process(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiAgentTaskProcessReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiAgentTaskProcessReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiAgentTaskProcessReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiAgentTaskProcessReply::MergeFrom(const UiAgentTaskProcessReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  process_.MergeFrom(from.process_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiAgentTaskProcessReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiAgentTaskProcessReply::CopyFrom(const UiAgentTaskProcessReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiAgentTaskProcessReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < process_size(); i++) {
    if (!this->process(i).IsInitialized()) return false;
  }
  return true;
}

void UiAgentTaskProcessReply::Swap(UiAgentTaskProcessReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    process_.Swap(&other->process_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiAgentTaskProcessReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiAgentTaskProcessReply_descriptor_;
  metadata.reflection = UiAgentTaskProcessReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskCmd::kClientMsgIdFieldNumber;
const int UiTaskCmd::kTaskIdFieldNumber;
const int UiTaskCmd::kUidFieldNumber;
const int UiTaskCmd::kSubtaskIdFieldNumber;
const int UiTaskCmd::kIpFieldNumber;
const int UiTaskCmd::kSvrNameFieldNumber;
const int UiTaskCmd::kSvrPoolFieldNumber;
const int UiTaskCmd::kConcurrentNumFieldNumber;
const int UiTaskCmd::kConcurrentRateFieldNumber;
const int UiTaskCmd::kTaskTimeoutFieldNumber;
const int UiTaskCmd::kAutoFieldNumber;
const int UiTaskCmd::kCmdTypeFieldNumber;
const int UiTaskCmd::kUserFieldNumber;
const int UiTaskCmd::kPasswdFieldNumber;
#endif  // !_MSC_VER

UiTaskCmd::UiTaskCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskCmd::InitAsDefaultInstance() {
}

UiTaskCmd::UiTaskCmd(const UiTaskCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskCmd::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  task_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  subtask_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  svr_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  concurrent_num_ = 0;
  concurrent_rate_ = 0;
  task_timeout_ = 0;
  auto__ = false;
  cmd_type_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskCmd::~UiTaskCmd() {
  SharedDtor();
}

void UiTaskCmd::SharedDtor() {
  if (task_id_ != &::google::protobuf::internal::kEmptyString) {
    delete task_id_;
  }
  if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
    delete subtask_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_name_;
  }
  if (svr_pool_ != &::google::protobuf::internal::kEmptyString) {
    delete svr_pool_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskCmd_descriptor_;
}

const UiTaskCmd& UiTaskCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiTaskCmd* UiTaskCmd::default_instance_ = NULL;

UiTaskCmd* UiTaskCmd::New() const {
  return new UiTaskCmd;
}

void UiTaskCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    if (has_task_id()) {
      if (task_id_ != &::google::protobuf::internal::kEmptyString) {
        task_id_->clear();
      }
    }
    uid_ = 0;
    if (has_subtask_id()) {
      if (subtask_id_ != &::google::protobuf::internal::kEmptyString) {
        subtask_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_svr_name()) {
      if (svr_name_ != &::google::protobuf::internal::kEmptyString) {
        svr_name_->clear();
      }
    }
    if (has_svr_pool()) {
      if (svr_pool_ != &::google::protobuf::internal::kEmptyString) {
        svr_pool_->clear();
      }
    }
    concurrent_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    concurrent_rate_ = 0;
    task_timeout_ = 0;
    auto__ = false;
    cmd_type_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_id;
        break;
      }

      // required string task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_id().data(), this->task_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required int32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subtask_id;
        break;
      }

      // optional string subtask_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtask_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtask_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subtask_id().data(), this->subtask_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_svr_name;
        break;
      }

      // optional string svr_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_name().data(), this->svr_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_svr_pool;
        break;
      }

      // optional string svr_pool = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svr_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_svr_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svr_pool().data(), this->svr_pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_concurrent_num;
        break;
      }

      // optional int32 concurrent_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_concurrent_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concurrent_num_)));
          set_has_concurrent_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_concurrent_rate;
        break;
      }

      // optional int32 concurrent_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_concurrent_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concurrent_rate_)));
          set_has_concurrent_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_task_timeout;
        break;
      }

      // optional int32 task_timeout = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_timeout_)));
          set_has_task_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_auto;
        break;
      }

      // optional bool auto = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cmd_type;
        break;
      }

      // required .dcmd_api.CmdType cmd_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::CmdType_IsValid(value)) {
            set_cmd_type(static_cast< ::dcmd_api::CmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_user;
        break;
      }

      // required string user = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_passwd;
        break;
      }

      // required string passwd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->task_id(), output);
  }

  // required int32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // optional string subtask_id = 4;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->subtask_id(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  // optional string svr_name = 6;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->svr_name(), output);
  }

  // optional string svr_pool = 7;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_pool().data(), this->svr_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->svr_pool(), output);
  }

  // optional int32 concurrent_num = 8;
  if (has_concurrent_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->concurrent_num(), output);
  }

  // optional int32 concurrent_rate = 9;
  if (has_concurrent_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->concurrent_rate(), output);
  }

  // optional int32 task_timeout = 10;
  if (has_task_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->task_timeout(), output);
  }

  // optional bool auto = 11;
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->auto_(), output);
  }

  // required .dcmd_api.CmdType cmd_type = 12;
  if (has_cmd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->cmd_type(), output);
  }

  // required string user = 13;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->user(), output);
  }

  // required string passwd = 14;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->passwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required string task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_id().data(), this->task_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->task_id(), target);
  }

  // required int32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->uid(), target);
  }

  // optional string subtask_id = 4;
  if (has_subtask_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subtask_id().data(), this->subtask_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->subtask_id(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional string svr_name = 6;
  if (has_svr_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_name().data(), this->svr_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->svr_name(), target);
  }

  // optional string svr_pool = 7;
  if (has_svr_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svr_pool().data(), this->svr_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->svr_pool(), target);
  }

  // optional int32 concurrent_num = 8;
  if (has_concurrent_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->concurrent_num(), target);
  }

  // optional int32 concurrent_rate = 9;
  if (has_concurrent_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->concurrent_rate(), target);
  }

  // optional int32 task_timeout = 10;
  if (has_task_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->task_timeout(), target);
  }

  // optional bool auto = 11;
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->auto_(), target);
  }

  // required .dcmd_api.CmdType cmd_type = 12;
  if (has_cmd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->cmd_type(), target);
  }

  // required string user = 13;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->user(), target);
  }

  // required string passwd = 14;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->passwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required string task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_id());
    }

    // required int32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string subtask_id = 4;
    if (has_subtask_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtask_id());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string svr_name = 6;
    if (has_svr_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_name());
    }

    // optional string svr_pool = 7;
    if (has_svr_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->svr_pool());
    }

    // optional int32 concurrent_num = 8;
    if (has_concurrent_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concurrent_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 concurrent_rate = 9;
    if (has_concurrent_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concurrent_rate());
    }

    // optional int32 task_timeout = 10;
    if (has_task_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_timeout());
    }

    // optional bool auto = 11;
    if (has_auto_()) {
      total_size += 1 + 1;
    }

    // required .dcmd_api.CmdType cmd_type = 12;
    if (has_cmd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd_type());
    }

    // required string user = 13;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string passwd = 14;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskCmd::MergeFrom(const UiTaskCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_subtask_id()) {
      set_subtask_id(from.subtask_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_svr_name()) {
      set_svr_name(from.svr_name());
    }
    if (from.has_svr_pool()) {
      set_svr_pool(from.svr_pool());
    }
    if (from.has_concurrent_num()) {
      set_concurrent_num(from.concurrent_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_concurrent_rate()) {
      set_concurrent_rate(from.concurrent_rate());
    }
    if (from.has_task_timeout()) {
      set_task_timeout(from.task_timeout());
    }
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
    if (from.has_cmd_type()) {
      set_cmd_type(from.cmd_type());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskCmd::CopyFrom(const UiTaskCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003807) != 0x00003807) return false;

  return true;
}

void UiTaskCmd::Swap(UiTaskCmd* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(uid_, other->uid_);
    std::swap(subtask_id_, other->subtask_id_);
    std::swap(ip_, other->ip_);
    std::swap(svr_name_, other->svr_name_);
    std::swap(svr_pool_, other->svr_pool_);
    std::swap(concurrent_num_, other->concurrent_num_);
    std::swap(concurrent_rate_, other->concurrent_rate_);
    std::swap(task_timeout_, other->task_timeout_);
    std::swap(auto__, other->auto__);
    std::swap(cmd_type_, other->cmd_type_);
    std::swap(user_, other->user_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskCmd_descriptor_;
  metadata.reflection = UiTaskCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UiTaskCmdReply::kClientMsgIdFieldNumber;
const int UiTaskCmdReply::kStateFieldNumber;
const int UiTaskCmdReply::kErrFieldNumber;
#endif  // !_MSC_VER

UiTaskCmdReply::UiTaskCmdReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UiTaskCmdReply::InitAsDefaultInstance() {
}

UiTaskCmdReply::UiTaskCmdReply(const UiTaskCmdReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UiTaskCmdReply::SharedCtor() {
  _cached_size_ = 0;
  client_msg_id_ = 0;
  state_ = 0;
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UiTaskCmdReply::~UiTaskCmdReply() {
  SharedDtor();
}

void UiTaskCmdReply::SharedDtor() {
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void UiTaskCmdReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UiTaskCmdReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UiTaskCmdReply_descriptor_;
}

const UiTaskCmdReply& UiTaskCmdReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcmd_5fui_2eproto();
  return *default_instance_;
}

UiTaskCmdReply* UiTaskCmdReply::default_instance_ = NULL;

UiTaskCmdReply* UiTaskCmdReply::New() const {
  return new UiTaskCmdReply;
}

void UiTaskCmdReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_msg_id_ = 0;
    state_ = 0;
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UiTaskCmdReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 client_msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_msg_id_)));
          set_has_client_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .dcmd_api.DcmdState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcmd_api::DcmdState_IsValid(value)) {
            set_state(static_cast< ::dcmd_api::DcmdState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err;
        break;
      }

      // optional string err = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UiTaskCmdReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client_msg_id(), output);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UiTaskCmdReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 client_msg_id = 1;
  if (has_client_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client_msg_id(), target);
  }

  // required .dcmd_api.DcmdState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional string err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UiTaskCmdReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 client_msg_id = 1;
    if (has_client_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_msg_id());
    }

    // required .dcmd_api.DcmdState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UiTaskCmdReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UiTaskCmdReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UiTaskCmdReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UiTaskCmdReply::MergeFrom(const UiTaskCmdReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_msg_id()) {
      set_client_msg_id(from.client_msg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UiTaskCmdReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UiTaskCmdReply::CopyFrom(const UiTaskCmdReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UiTaskCmdReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UiTaskCmdReply::Swap(UiTaskCmdReply* other) {
  if (other != this) {
    std::swap(client_msg_id_, other->client_msg_id_);
    std::swap(state_, other->state_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UiTaskCmdReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UiTaskCmdReply_descriptor_;
  metadata.reflection = UiTaskCmdReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcmd_api

// @@protoc_insertion_point(global_scope)
